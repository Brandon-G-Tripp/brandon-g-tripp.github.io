{"version":3,"sources":["common/directives/customPasswordValidation/customPasswordValidation.spec.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,WAAW,iBAAiB,8BAA8B,QAAQ,YAAY,UAAU,SAAS;EAChH,IADK,SAEA,0BACA,MACA,QAGD;EALJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;OAKP,UAAU,eAAe,IAAI,UAAU,2BAA2B;MAHlE,2BAAwB,0BAAA;OAKxB,UAAU,OAAO;MAJjB,OAAI,MAAA;OAMJ,UAAU,SAAS;MALnB,SAAM,QAAA;;IAQT,SAAS,YAAY;MACnB;;MAPN,KAAK,IAAI;MACH,SAAS,KAAK;;MAEpB,SAAS,uCAAuC,YAAM;QACpD,IAAI,UAAO;QACX,IAAI,WAAQ;QACZ,IAAI,QAAK;;QAET,WAAW,QAAQ,KAAK,OAAO,yBAAyB;;QAExD,WAAW,OAAO,UAAC,YAAY,UAAa;UAC1C,QAAQ,WAAW;;UAEnB,IAAM,kBAAkB;UACxB,UAAU,QAAQ,QAAQ;;UAE1B,WAAW,SAAS,SAAS;UAC7B,MAAM;;;QAGR,IAAM,aAAa,UAAC,UAAa;UAC/B,GAAE,kBAAkB,UAAa,YAAM;YACrC,MAAM,WAAW;YACjB,MAAM;YACN,OAAO,SAAS,GAAG,KAAK,OAAO;;;;QAInC,IAAM,eAAe,UAAC,UAAa;UACjC,GAAE,oBAAoB,UAAa,YAAM;YACvC,MAAM,WAAW;YACjB,MAAM;YACN,OAAO,SAAS,GAAG,KAAK,OAAO;;;;QAInC,WAAW;;QAEX,aAAa;QACb,aAAa;QACb,aAAa;QACb,aAAa;;;;GAaZ","file":"common/directives/customPasswordValidation/customPasswordValidation.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport customPasswordValidation from './customPasswordValidation';\nimport chai from 'chai';\nimport chaiJq from 'chai-jq';\n\nchai.use(chaiJq);\nconst expect = chai.expect;\n\ndescribe('directive: customPasswordValidation', () => {\n  let element;\n  let compiled;\n  let scope;\n\n  beforeEach(angular.mock.module(customPasswordValidation.name));\n\n  beforeEach(inject(($rootScope, $compile) => {\n    scope = $rootScope.$new();\n\n    const elementTemplate = '<input type=\"password\" custom-password-validation required name=\"testSignup\" ng-model=\"password\">';\n    element = angular.element(elementTemplate);\n\n    compiled = $compile(element)(scope);\n    scope.$digest();\n  }));\n\n  const checkValid = (password) => {\n    it(`is valid for ${ password }`, () => {\n      scope.password = password;\n      scope.$digest();\n      expect(element).to.have.$class('ng-valid');\n    });\n  };\n\n  const checkInvalid = (password) => {\n    it(`is invalid for ${ password }`, () => {\n      scope.password = password;\n      scope.$digest();\n      expect(element).to.have.$class('ng-invalid');\n    });\n  };\n\n  checkValid('FooBarBaz1');\n\n  checkInvalid('FooBar1');\n  checkInvalid('FooBarBaz');\n  checkInvalid('foobarbaz1');\n  checkInvalid('FOOBARBAZ1');\n\n});\n"],"sourceRoot":"/source/"}