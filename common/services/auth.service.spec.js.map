{"version":3,"sources":["common/services/auth.service.spec.js"],"names":["angular","chai","sinon","sinonChai","authServiceModule","use","expect","describe","User","Config","$cookieStore","$httpBackend","Auth","postData","userInfo","userObject","anError","beforeEach","token","username","password","role","code","message","mock","module","name","$provide","get","callback","noop","save","data","successCallback","$promise","Promise","resolve","value","urlBase","spy","put","remove","inject","_$httpBackend_","_Auth_","verifyBackend","flush","verifyNoOutstandingExpectation","verifyNoOutstandingRequest","it","expectPOST","respond","login","stub","whenPOST","to","have","been","called","calledWithExactly","done","then","res","equal","catch","calledWith","logout","err","deep","createUser","userSaveErr","user","errorCallback","reject","getCurrentUser","setUserProperty","newRole","property","not","isLoggedIn","be","true","isAdmin","false"],"mappings":"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","file":"auth.service.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport authServiceModule from './auth.service';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('service: Auth', () => {\n  let User;\n  let Config;\n  let $cookieStore;\n  let $httpBackend;\n  let Auth;\n  let postData;\n  let userInfo;\n  let userObject;\n  let anError;\n\n  beforeEach('set up local test variables', () => {\n    postData = {\n      token: '123abc'\n    };\n    userInfo = {\n      username: 'aUsername',\n      password: 'aPassword'\n    };\n    userObject = {\n      role: 'user'\n    };\n    anError = { code: 400, message: 'foo' };\n  });\n\n  beforeEach('inject mock modules', angular.mock.module(authServiceModule.name, ($provide) => {\n    User = {\n      get(callback) {\n        callback = callback || angular.noop;\n        callback(userObject);\n      },\n      save(data, successCallback) {\n        successCallback({\n          token: '123abc'\n        });\n        return { $promise: Promise.resolve() };\n      }\n    };\n    $provide.value('User', User);\n\n    Config = {\n      urlBase: 'foo'\n    };\n    $provide.value('Config', Config);\n\n    $cookieStore = {\n      get: sinon.spy(),\n      put: sinon.spy(),\n      remove: sinon.spy()\n    };\n\n    $provide.value('$cookieStore', $cookieStore);\n  }));\n\n  beforeEach(inject((_$httpBackend_, _Auth_) => {\n    $httpBackend = _$httpBackend_;\n    Auth = _Auth_;\n  }));\n\n  const verifyBackend = () => {\n    $httpBackend.flush();\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  };\n\n  describe('login method', () => {\n    it(`posts to urlBase at '/api/auth/login'`, () => {\n      $httpBackend.expectPOST(Config.urlBase + '/api/auth/login')\n        .respond(postData);\n      Auth.login(userInfo);\n      verifyBackend();\n    });\n\n    describe('on successful POST', () => {\n      it('calls callback with no arguments', () => {\n        const callback = sinon.stub();\n\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(postData);\n\n        Auth.login(userInfo, callback);\n        $httpBackend.flush();\n        expect(callback).to.have.been.called;\n        expect(callback).to.have.been.calledWithExactly();\n      });\n\n      it('returns a promise that resolves to the user object', (done) => {\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(postData);\n\n        Auth.login(userInfo)\n          .then((res) => {\n            expect(res).to.equal(userObject);\n            done();\n          })\n          .catch(done);\n\n        $httpBackend.flush();\n      });\n\n      it('adds the token to the $cookieStore', (done) => {\n        const token = '123abc';\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond({ token });\n\n        Auth.login(userInfo)\n          .then(() => {\n            expect($cookieStore.put).to.have.been.calledWith('token', token);\n            done();\n          })\n          .catch(done);\n\n        $httpBackend.flush();\n      });\n    });\n\n    describe('on failed POST', () => {\n      it('calls Auth.logout()', () => {\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(400, anError);\n\n        Auth.logout = sinon.spy();\n        Auth.login(userInfo);\n        $httpBackend.flush();\n        expect(Auth.logout).to.have.been.called;\n      });\n\n      it('calls callback with an error', () => {\n        const callback = sinon.stub();\n\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(400, anError);\n\n        Auth.logout = angular.noop;\n        Auth.login(userInfo, callback);\n        $httpBackend.flush();\n        expect(callback).to.have.been.calledWith(anError);\n      });\n\n      it('returns a promise that rejects with an error object', (done) => {\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(400, anError);\n\n        Auth.logout = angular.noop;\n        Auth.login(userInfo)\n          .then(null, (err) => {\n            expect(err).to.deep.equal(anError);\n            done();\n          })\n          .catch(done);\n        $httpBackend.flush();\n      });\n    });\n  });\n\n  describe('logout method', () => {\n    it('removes token from $cookieStore', () => {\n      Auth.logout();\n      expect($cookieStore.remove).to.have.been.calledWith('token');\n    });\n  });\n\n  describe('createUser method', () => {\n    it('calls User.save with the user data', () => {\n      sinon.spy(User, 'save');\n      Auth.createUser(userInfo);\n      expect(User.save).to.have.been.called;\n    });\n\n    describe('on successful user creation', () => {\n      it('calls the callback with the original user info', () => {\n        const callback = sinon.spy();\n        Auth.createUser(userInfo, callback);\n        expect(callback).to.have.been.calledWith(userInfo);\n      });\n\n      it('adds the token to the $cookieStore', (done) => {\n        Auth.createUser(userInfo, () => {\n          expect($cookieStore.put).to.have.been.calledWith('token', '123abc');\n          done();\n        });\n      });\n    });\n\n    describe('on failed user creation', () => {\n      let userSaveErr;\n\n      beforeEach('make User.save call the error callback and return a rejected promise', () => {\n        userSaveErr = {};\n        User.save = (user, successCallback, errorCallback) => {\n          errorCallback(userSaveErr);\n          return { $promise: Promise.reject(userSaveErr) };\n        };\n      });\n\n      it('calls the callback with the error', () => {\n        const callback = sinon.spy();\n\n        Auth.createUser(userInfo, callback);\n        expect(callback).to.have.been.calledWith(userSaveErr);\n      });\n\n      it('calls the logout method', () => {\n        sinon.spy(Auth, 'logout');\n        Auth.createUser(userInfo);\n        expect(Auth.logout).to.have.been.called;\n      });\n\n    });\n  });\n\n  describe('for a logged in user', () => {\n    beforeEach('log in a user', () => {\n      $httpBackend.expectPOST(Config.urlBase + '/api/auth/login')\n        .respond(postData);\n\n      Auth.login(userInfo);\n      $httpBackend.flush();\n    });\n\n    it('getCurrentUser() gets current user', () => {\n      expect(Auth.getCurrentUser()).to.equal(userObject);\n    });\n\n    describe('setUserProperty method', () => {\n      it('returns the current user', () => {\n        expect(Auth.setUserProperty('foo', 'bar')).to.equal(userObject);\n      });\n\n      it(`can set a property on the current user if it's previously defined`, () => {\n        const newRole = 'kingslayer';\n        Auth.setUserProperty('role', newRole);\n        expect(Auth.getCurrentUser()).to.have.property('role', newRole);\n      });\n\n      it(`can't set a property on the current user if it wasn't previously defined`, () => {\n        Auth.setUserProperty('height', 10);\n        expect(Auth.getCurrentUser()).not.to.have.property('height');\n      });\n    });\n\n    it('isLoggedIn() is true', () => {\n      expect(Auth.isLoggedIn()).to.be.true;\n    });\n\n    it('isAdmin() checks the currentUser.role', () => {\n      userObject.role = 'admin';\n      expect(Auth.isAdmin()).to.be.true;\n\n      userObject.role = 'user';\n      expect(Auth.isAdmin()).to.be.false;\n    });\n  });\n});\n"]}