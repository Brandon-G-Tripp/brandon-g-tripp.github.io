{"version":3,"sources":["common/services/authInterceptor.service.spec.js"],"names":["angular","chai","sinon","sinonChai","authInterceptorService","use","expect","describe","$rootScope","$cookieStore","authInterceptor","beforeEach","mock","module","name","$provide","get","stub","remove","value","inject","_$rootScope_","_authInterceptor_","it","aToken","withArgs","returns","request","headers","Authorization","to","equal","be","undefined","done","responseError","status","catch","err","have","been","calledWith","$digest"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,WAAW,iBAAiB,QAAQ,SAAS,cAAc,8BAA8B,UAAU,SAAS,UAAU;EACrI;;EAEA,IAAI,SAAS,MAAM,OAAO,WAAW,wBAAwB;EAC7D,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAP3BA,UAQS,SAAS;OAClB,UAAU,eAAe,IAAI,UAAU,OAAO;MAP9CC,OAQM,MAAM;OACZ,UAAU,QAAQ;MARlBC,QASO,OAAO;OACd,UAAU,YAAY;MATtBC,YAUW,WAAW;OACtB,UAAU,yBAAyB;MATnCC,yBAUwB,wBAAwB;;IAEnD,SAAS,YAAY;MAVzBH,KAAKI,IAAIF;MACHG,SAASL,KAAKK;MAEpBC,SAAS,4BAA4B,YAAM;QACzC,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QAEJC,WAAW,eAAeX,QAAQY,KAAKC,OAAOT,uBAAuBU,MAAM,UAACC,UAAa;UACvFN,eAAe;YAAEO,KAAKd,MAAMe;YAAQC,QAAQhB,MAAMe;;UAClDF,SAASI,MAAM,gBAAgBV;;QAGjCE,WAAWS,OAAO,UAACC,cAAcC,mBAAsB;UACrDd,aAAaa;UACbX,kBAAkBY;;QAGpBf,SAAS,kBAAkB,YAAM;UAC/BgB,GAAG,gEAAgE,YAAM;YACvE,IAAMC,SAAS;YACff,aAAaO,IAAIS,SAAS,SAASC,QAAQF;YAE3C,IAAMG,UAAUjB,gBAAgBiB,QAAQ;YACxCrB,OAAOqB,QAAQC,QAAQC,eAAeC,GAAGC,MAAzC,UAAA,OAA0DP;;UAG5DD,GAAE,kDAAmD,YAAM;YACzDd,aAAaO,IAAIS,SAAS,SAASC;YACnC,IAAMC,UAAUjB,gBAAgBiB,QAAQ;YACxCrB,OAAOqB,QAAQC,QAAQC,eAAeC,GAAGE,GAAGC;;;QAIhD1B,SAAS,wBAAwB,YAAM;UACrCgB,GAAG,uEAAuE,UAACW,MAAS;YAClFxB,gBAAgByB,cAAc;cAAEC,QAAQ;eACrCC,MAAM,UAACC,KAAQ;cACdhC,OAAOG,aAAaS,QAAQY,GAAGS,KAAKC,KAAKC,WAAW;cACpDnC,OAAOgC,IAAIF,QAAQN,GAAGC,MAAM;cAC5BG;eAEDG,MAAMH;YACT1B,WAAWkC;;;;;;GAad","file":"authInterceptor.service.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport authInterceptorService from './authInterceptor.service';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('service: authInterceptor', () => {\n  let $rootScope;\n  let $cookieStore;\n  let authInterceptor;\n\n  beforeEach('mock module', angular.mock.module(authInterceptorService.name, ($provide) => {\n    $cookieStore = { get: sinon.stub(), remove: sinon.stub() };\n    $provide.value('$cookieStore', $cookieStore);\n  }));\n\n  beforeEach(inject((_$rootScope_, _authInterceptor_) => {\n    $rootScope = _$rootScope_;\n    authInterceptor = _authInterceptor_;\n  })); \n\n  describe('request method', () => {\n    it('sets the Authorization header to the token from $cookieStore', () => {\n      const aToken = '123abc';\n      $cookieStore.get.withArgs('token').returns(aToken);\n\n      const request = authInterceptor.request({});\n      expect(request.headers.Authorization).to.equal(`Bearer ${ aToken }`);\n    });\n\n    it(`does nothing if there's no cookie in the store`, () => {\n      $cookieStore.get.withArgs('token').returns();\n      const request = authInterceptor.request({});\n      expect(request.headers.Authorization).to.be.undefined;\n    });\n  });\n\n  describe('responseError method', () => {\n    it('removes the token from the $cookieStore if the error status was 401', (done) => {\n      authInterceptor.responseError({ status: 401 })\n        .catch((err) => {\n          expect($cookieStore.remove).to.have.been.calledWith('token');\n          expect(err.status).to.equal(401);\n          done();\n        })\n        .catch(done);\n      $rootScope.$digest();\n    });\n  });\n});\n"]}