{"version":3,"sources":["common/services/authInterceptor.service.spec.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,WAAW,iBAAiB,QAAQ,SAAS,cAAc,8BAA8B,UAAU,SAAS;EAC3H,IADK,SAEA,MACA,OACA,WAEA,wBAGD;EAPJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;OAKP,UAAU,eAAe,IAAI,UAAU,OAAO;MAH9C,OAAI,MAAA;OAKJ,UAAU,QAAQ;MAJlB,QAAK,OAAA;OAML,UAAU,YAAY;MALtB,YAAS,WAAA;OAOT,UAAU,yBAAyB;MALnC,yBAAsB,wBAAA;;IAQzB,SAAS,YAAY;MACnB;;MAPN,KAAK,IAAI;MACH,SAAS,KAAK;;MAEpB,SAAS,4BAA4B,YAAM;QACzC,IAAI,aAAU;QACd,IAAI,eAAY;QAChB,IAAI,kBAAe;;QAEnB,WAAW,eAAe,QAAQ,KAAK,OAAO,uBAAuB,MAAM,UAAC,UAAa;UACvF,eAAe,EAAE,KAAK,MAAM,QAAQ,QAAQ,MAAM;UAClD,SAAS,MAAM,gBAAgB;;;QAGjC,WAAW,OAAO,UAAC,cAAc,mBAAsB;UACrD,aAAa;UACb,kBAAkB;;;QAGpB,SAAS,kBAAkB,YAAM;UAC/B,GAAG,gEAAgE,YAAM;YACvE,IAAM,SAAS;YACf,aAAa,IAAI,SAAS,SAAS,QAAQ;;YAE3C,IAAM,UAAU,gBAAgB,QAAQ;YACxC,OAAO,QAAQ,QAAQ,eAAe,GAAG,MAAK,YAAY;;;UAG5D,GAAE,kDAAmD,YAAM;YACzD,aAAa,IAAI,SAAS,SAAS;YACnC,IAAM,UAAU,gBAAgB,QAAQ;YACxC,OAAO,QAAQ,QAAQ,eAAe,GAAG,GAAG;;;;QAIhD,SAAS,wBAAwB,YAAM;UACrC,GAAG,uEAAuE,UAAC,MAAS;YAClF,gBAAgB,cAAc,EAAE,QAAQ,OAAM,SACrC,UAAC,KAAQ;cACd,OAAO,aAAa,QAAQ,GAAG,KAAK,KAAK,WAAW;cACpD,OAAO,IAAI,QAAQ,GAAG,MAAM;cAC5B;eACA,SACK;YACT,WAAW;;;;;;GAad","file":"common/services/authInterceptor.service.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport authInterceptorService from './authInterceptor.service';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('service: authInterceptor', () => {\n  let $rootScope;\n  let $cookieStore;\n  let authInterceptor;\n\n  beforeEach('mock module', angular.mock.module(authInterceptorService.name, ($provide) => {\n    $cookieStore = { get: sinon.stub(), remove: sinon.stub() };\n    $provide.value('$cookieStore', $cookieStore);\n  }));\n\n  beforeEach(inject((_$rootScope_, _authInterceptor_) => {\n    $rootScope = _$rootScope_;\n    authInterceptor = _authInterceptor_;\n  })); \n\n  describe('request method', () => {\n    it('sets the Authorization header to the token from $cookieStore', () => {\n      const aToken = '123abc';\n      $cookieStore.get.withArgs('token').returns(aToken);\n\n      const request = authInterceptor.request({});\n      expect(request.headers.Authorization).to.equal(`Bearer ${ aToken }`);\n    });\n\n    it(`does nothing if there's no cookie in the store`, () => {\n      $cookieStore.get.withArgs('token').returns();\n      const request = authInterceptor.request({});\n      expect(request.headers.Authorization).to.be.undefined;\n    });\n  });\n\n  describe('responseError method', () => {\n    it('removes the token from the $cookieStore if the error status was 401', (done) => {\n      authInterceptor.responseError({ status: 401 })\n        .catch((err) => {\n          expect($cookieStore.remove).to.have.been.calledWith('token');\n          expect(err.status).to.equal(401);\n          done();\n        })\n        .catch(done);\n      $rootScope.$digest();\n    });\n  });\n});\n"],"sourceRoot":"/source/"}