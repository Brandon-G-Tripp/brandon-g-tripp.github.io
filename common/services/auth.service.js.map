{"version":3,"sources":["common/services/auth.service.js"],"names":["angular","userService","configService","authServiceModule","module","name","factory","$state","$timeout","$rootScope","$http","User","Config","$cookieStore","$q","currentUser","isWaitingForInitialAuth","nextRoute","get","data","current","go","reload","remove","login","user","callback","cb","noop","deferred","defer","post","urlBase","username","password","success","put","token","resolve","err","reject","error","logout","promise","createUser","organization","save","hasOwnProperty","role","$promise","changePassword","oldPassword","newPassword","id","_id","getCurrentUser","setUserProperty","prop","val","isLoggedIn","isLoggedInAsync","then","catch","setNextRoute","route","getNextRoute","isAdmin","getRoles","getToken"],"mappings":"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","file":"auth.service.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport 'angular-ui-router';\nimport userService from 'common/services/user.service';\nimport configService from 'config/config';\n\nconst authServiceModule = angular.module('auth.service.js', [\n  'ui.router',\n  userService.name,\n  configService.name\n]);\n\nauthServiceModule.factory('Auth', function ($state, $timeout, $rootScope, $http, User, Config, $cookieStore, $q) {\n    var currentUser = {};\n    var isWaitingForInitialAuth =  true;\n    var nextRoute =  false;\n\n    if ($cookieStore.get('token')) {\n\n        User.get( function (data) {\n          // update currentUser, toggle waiting for Auth bool, route\n          currentUser = data;\n          isWaitingForInitialAuth =  false;\n          // if the user API response was slow and the UI has pushed the user\n          // to /login while waiting for a response, forward them to their\n          // intended route\n          if ( $state.current.name === 'login' ) {\n            $state.go(nextRoute.name || 'content', {}, { reload: true });\n          }\n        }, function () {\n          // error, so we remove the token and redirect to login\n          isWaitingForInitialAuth =  false;\n          $cookieStore.remove('token');\n          currentUser = {};\n          $state.go('login', {}, { reload: true });\n        });\n\n    } else {\n      isWaitingForInitialAuth = false;\n    }\n\n    return {\n\n      /**\n       * Authenticate user and save token\n       *\n       * @param  {Object}   user     - login info\n       * @param  {Function} callback - optional\n       * @return {Promise}\n       */\n      login (user, callback) {\n        var cb = callback || angular.noop;\n        var deferred = $q.defer();\n\n        $http.post( Config.urlBase + '/api/auth/local', {\n          username: user.username,\n          password: user.password\n        })\n        .success((data) => {\n          $cookieStore.put('token', data.token);\n          User.get( (data) => {\n            currentUser = data;\n            deferred.resolve(data);\n            return cb();\n          }, (err) => {\n            deferred.reject(err);\n            return cb(err);\n          });\n        })\n        .error((err) => {\n          this.logout();\n          deferred.reject(err);\n          return cb(err);\n        });\n\n        return deferred.promise;\n      },\n\n      /**\n       * Delete access token and user info\n       *\n       * @param  {Function}\n       */\n      logout () {\n        $cookieStore.remove('token');\n        currentUser = {};\n      },\n\n      /**\n       * Create a new user\n       *\n       * @param  {Object}   user     - user info\n       * @param  {Function} callback - optional\n       * @return {Promise}\n       */\n      createUser (user, callback) {\n        var cb = callback || angular.noop;\n\n        // @FIXME when organizations are ready\n        user.organization = 'scala';\n\n        return User.save(user,\n          (data) => {\n            if ( currentUser.hasOwnProperty('role') && currentUser.role === 'admin' ) {\n              return cb(currentUser);\n            }\n            $cookieStore.put('token', data.token);\n            currentUser = User.get();\n            return cb(user);\n          },\n          (err) => {\n            this.logout();\n            return cb(err);\n          }).$promise;\n      },\n\n      /**\n       * Change password\n       *\n       * @param  {String}   oldPassword\n       * @param  {String}   newPassword\n       * @param  {Function} callback    - optional\n       * @return {Promise}\n       */\n      changePassword (oldPassword, newPassword, callback) {\n        var cb = callback || angular.noop;\n\n        return User.changePassword({ id: currentUser._id }, {\n          oldPassword: oldPassword,\n          newPassword: newPassword\n        }, function(user) {\n          return cb(user);\n        }, function(err) {\n          return cb(err);\n        }).$promise;\n      },\n\n      /**\n       * Gets all available info on authenticated user\n       *\n       * @return {Object} user\n       */\n      getCurrentUser () {\n        return currentUser;\n      },\n\n      /**\n       * Sets a property on the currentUser object\n       *\n       * @return {String} prop\n       */\n      setUserProperty (prop, val) {\n        if ( currentUser.hasOwnProperty(prop) ) {\n          currentUser[prop] = val;\n        }\n        return currentUser;\n      },\n\n      /**\n       * Check if waiting for the initial Auth check\n       *\n       * @return {Boolean}\n       */\n      isWaitingForInitialAuth () {\n        return isWaitingForInitialAuth;\n      },\n\n      /**\n       * Check if a user is logged in\n       *\n       * @return {Boolean}\n       */\n      isLoggedIn () {\n        return currentUser.hasOwnProperty('role');\n      },\n\n      /**\n       * Waits for currentUser to resolve before checking if user is logged in\n       */\n      isLoggedInAsync (cb) {\n        if(currentUser.hasOwnProperty('$promise')) {\n          currentUser.$promise.then(function() {\n            cb(true);\n          }).catch(function() {\n            cb(false);\n          });\n        } else if(currentUser.hasOwnProperty('role')) {\n          cb(true);\n        } else {\n          cb(false);\n        }\n      },\n\n      /**\n       * Save the next route user is attempting to navigate to\n       *\n       * @return {Object}\n       */\n      setNextRoute (route) {\n        if ( route.name !== 'login' && route.name !== 'logout' ) {\n          nextRoute = route;\n        }\n        return nextRoute;\n      },\n\n      /**\n       * Save the next route user is attempting to navigate to\n       *\n       * @return {Object}\n       */\n      getNextRoute () {\n        return nextRoute;\n      },\n\n      /**\n       * Check if a user is an admin\n       *\n       * @return {Boolean}\n       */\n      isAdmin () {\n        return currentUser.role === 'admin';\n      },\n\n      /**\n       * Get a list of user roles\n       *\n       * @return {Array}\n       */\n      getRoles () {\n        return [\n          {\n            val: 'user',\n            name: 'User'\n          },\n          {\n            val: 'admin',\n            name: 'Admin'\n          }\n        ];\n      },\n\n      /**\n       * Get auth token\n       */\n      getToken () {\n        return $cookieStore.get('token');\n      }\n    };\n  });\n\nexport default authServiceModule;\n"]}