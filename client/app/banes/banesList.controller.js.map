{"version":3,"sources":["app/banes/banesList.controller.js"],"names":[],"mappings":"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","file":"banesList.controller.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport 'lodash';\nimport banes from './banes.json!'\n\nclass BanesCtrl {\n\n  // called once when the class is instantiated\n  constructor ($scope, $location, $mdMedia, Config, Link) {\n\n    this.$scope = $scope;\n    this.$location = $location;\n    this.$scope.$mdMedia = $mdMedia;\n    this.Config = Config;\n    this.Link = Link;\n    this.items = banes || [];\n    this.filterAttributes = [\n            { name: 'Agility' },\n            { name: 'Alteration' },\n            { name: 'Creation' },\n            { name: 'Energy' },\n            { name: 'Entropy' },\n            { name: 'Influence' },\n            { name: 'Might' },\n            { name: 'Prescience' },\n            { name: 'Protection' },\n          ];\n    this.selectedAttributes = [];\n    this.searchQuery = '';\n    this.searchText = '';\n    this.powerLevelValue = this.$location.$$search.All || 9;\n\n    if ( !_.isEmpty( this.$location.$$search ) ) {\n      this.selectedAttributes = [];\n      Object.keys(this.$location.$$search).forEach( (val ) => {\n        if ( _.find( this.filterAttributes, { name: val }) ) {\n          this.selectedAttributes.push({ name: val, power: this.$location.$$search[val] });\n        }\n      });\n    }\n\n    this.$scope.$watch('banesCtrl.powerLevelValue', (newVal, oldVal) => {\n      if ( this.$location.$$search.All ) {\n        this.$location.search( 'All', newVal )\n      }\n    }, true);\n\n    // watch for changes to selectedItems filter, remove them from the querystring\n    // if they are present\n    this.$scope.$watch('banesCtrl.selectedAttributes', (newVal, oldVal) => {\n\n      // clear all params\n      this.$location.$$search = {};\n\n      // store all of the standard attributes other than 'All'\n      const newAttrs =  newVal.filter( attr => attr.name !== 'All' );\n\n      // when adding a new item, always set it's power level to the value from\n      // the UI dropdown\n      if ( newVal.length > oldVal.length ) {\n        const addedAttr = _.difference( _.map(newAttrs, 'name'), _.map(oldVal, 'name') );\n        const addedAttrIndex = _.findIndex( newAttrs, { name: addedAttr[0] });\n        if ( addedAttrIndex > -1 ) {\n          newAttrs.map( attr => {\n            if ( addedAttr[0] === attr.name ) {\n              attr.power = `${ this.powerLevelValue }`;\n            }\n          });\n        }\n      }\n\n      // prevent duplicate instances of a given key\n      newVal = _.uniqBy( newVal, 'name' );\n\n      if ( _.isEmpty( newVal ) ) {\n        newVal = [{ name: 'All' }];\n      } else if ( newAttrs.length > 0 ) {\n        newVal = newAttrs;\n      }\n\n      newVal.map( attr => {\n        attr.power = attr.power || `${ this.powerLevelValue }`;\n        return attr;\n      });\n\n      // set all incoming newVal params\n      newVal.forEach( attr => {\n        this.$location.search( attr.name, attr.power );\n      });\n\n      this.selectedAttributes = newVal;\n\n    }, true);\n\n  }\n\n  // public class methods\n  updateSearchTextModel (val) {\n    this.searchText = val;\n  }\n\n  attackAttrSearchFilter () {\n    // return all the options if the user hasn't selected a filter\n    return Promise.resolve().then( () => {\n      return this.filterAttributes.filter( attr => {\n        const alreadyUsed = this.selectedAttributes.filter( selected => selected.name === attr.name );\n        console.log('alreadyUsed',alreadyUsed)\n        if ( alreadyUsed.length > 0 ) {\n          return false;\n        } else if ( this.searchText === '' ) {\n          return true;\n        } else {\n          return attr.name.toLowerCase().match( this.searchText.toLowerCase() );\n        }\n      });\n   });\n  }\n\n  textSearchFilter () {\n    // if `searchQuery` is empty, we want to show all list items\n    return (thisPower) => {\n      var item = thisPower;\n      if ( this.searchQuery === '' && _.includes( this.selectedAttributes, 'All' ) ) {\n        return true;\n      }\n      var regex = new RegExp(this.searchQuery, 'gi');\n      var show = false; // initially we assume that we won't show a given result\n      var inAttackFilter = true;\n      // now we look for matches in the following object properties\n      show = item.name.match(regex) || item.description.match(regex) || item.effect.match(regex);\n      // if the selectedAttributes array is longer than 0, we need to show\n      // only results that match one of the selected properties\n      if ( this.selectedAttributes.length > 0 ) {\n        var inAttackFilter = false;\n        if ( _.find( this.selectedAttributes, { name: 'All' } )  ) {\n          inAttackFilter = true;\n        } else {\n          var searchAttrs = angular.copy( _.without( this.selectedAttributes, 'All' ) );\n          var inAttackFilter = _.intersection( item.attackAttributes, _.map(searchAttrs, 'name') ).length > 0;\n        }\n      }\n      // return the result (either `true` or `false`)\n      return show && inAttackFilter;\n    }\n  }\n\n  powerLevelFilter () {\n    return (thisPower) => {\n      let item = thisPower;\n      let include = false;\n      if ( this.$location.$$search.All === '9' ) return true;\n\n      // if there are any querystring search params\n      if ( _.compact( _.map( this.selectedAttributes, 'power' ) ).length > 0 ) {\n        for (var i = 0; i <= item.power.length; i++) {\n          // find the intersection between attributes in this power and\n          // attributes that are also in active parameters\n          let intersectAttributes = _.intersection( item.attackAttributes, _.map( this.selectedAttributes, 'name' ) );\n          if ( this.$location.$$search.All >= item.power[0] ) {\n            include = true;\n            return include;\n          } else if ( intersectAttributes.length > 0 ) {\n            intersectAttributes.forEach( (attr) => {\n              if ( this.$location.$$search[attr] >= item.power[0] || this.$location.$$search[attr] >= item.power[0] ) {\n                include = true;\n              }\n            });\n            return include;\n          }\n        };\n      }\n\n      return include;\n    }\n  }\n}\n\nexport default BanesCtrl;\n"]}