{"version":3,"sources":["app/feats/featsList.controller.js"],"names":[],"mappings":"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","file":"app/feats/featsList.controller.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport 'lodash';\nimport feats from './feats.json!'\n\nclass FeatsListCtrl {\n\n  // called once when the class is instantiated\n  constructor ($scope, $sce, $state, $mdMedia, Config, Link) {\n    this.$scope = $scope;\n    this.$scope.$mdMedia = $mdMedia;\n    this.Config = Config;\n    this.Link = Link;\n\n    this.powers = [];\n    this.powers = feats;\n    this.attributes = [\n            'All',\n            'Alteration',\n            'Creation',\n            'Fortitude',\n            'Energy',\n            'Entropy',\n            'Movement',\n            'Influence',\n            'Prescience',\n            'Protection',\n          ];\n    this.selectedPowers = [];\n    this.selectedAttributes = ['All'];\n    this.searchQuery = '';\n    this.attackAttrSearchText = '';\n    this.powerLevelValue = 1;\n    // this.powerComparator = 'or Greater';\n    this.powerComparator = 'gte';\n  }\n\n  // public class methods\n  updateSearchTextModel (val) {\n    this.attackAttrSearchText = val;\n  }\n\n  attackAttrSearchFilter () {\n    // return all the options if the user hasn't selected a filter\n    return (item) => {\n      return true;\n\n      // @TODO - Make this work!\n      if ( this.attackAttrSearchText === '' ){\n        return true;\n      } else {\n        if ( !Array.isArray(item.prerequisite) ) return false;\n        const prereqsAsString = item.prerequisite.join().toLowerCase();\n        let matchedSelectWithPrereq = []\n        this.selectedAttributes.forEach( attr => {\n          console.log('prereqsAsString.split(i).length > 1',prereqsAsString.split(i).length > 1)\n          if ( prereqsAsString.split(attr).length > 1 ) {\n            matchedSelectWithPrereq.push(attr)\n          }\n        });\n        return matchedSelectWithPrereq.length > 0;\n      }\n    }.bind(this);\n  }\n\n  textSearchFilter () {\n    // if `searchQuery` is empty, we want to show all list items\n    return (thisPower) => {\n      // debugger;\n      var item = thisPower;\n      if ( this.searchQuery === '' && _.includes( this.selectedAttributes, 'All' ) ) {\n        return true;\n      }\n      var regex = new RegExp(this.searchQuery, 'gi');\n      var show = false; // initially we assume that we won't show a given result\n      var inAttackFilter = true;\n      // now we look for matches in the following object properties\n      show = item.name.match(regex) || item.description.match(regex) || item.effect.match(regex);\n      // if the selectedAttributes array is longer than 0, we need to show\n      // only results that match one of the selected properties\n      if ( this.selectedAttributes.length > 0 ) {\n        var inAttackFilter = false;\n        if ( this.selectedAttributes.indexOf('All') !== -1 ) {\n          inAttackFilter = true;\n        } else {\n          var searchAttrs = angular.copy( this.selectedAttributes );\n          var inAttackFilter = _.intersection( item.attribute, searchAttrs ).length > 0;\n          // console.log( inAttackFilter );\n        }\n      }\n      // return the result (either `true` or `false`)\n      return show && inAttackFilter;\n    }\n  }\n\n  powerLevelFilter () {\n    return (thisPower) => {\n      var item = thisPower;\n      // const powerAbove = ( this.powerComparator === 'or Greater' );\n      // const powerAbove = ( this.powerComparator === 'or Greater' );\n      // if ( this.powerComparator === 'greater' ) {\n\n      // }\n      var include = false;\n      for (var i = 0; i <= item.cost.length; i++) {\n        switch (this.powerComparator) {\n          case 'gte':\n            if ( item.cost[i] >= parseInt( this.powerLevelValue ) ) {\n              include = true;\n            }\n            break;\n          case 'eq':\n            if ( item.cost[i] === parseInt( this.powerLevelValue ) ) {\n              include = true;\n            }\n            break;\n          case 'lte':\n            if ( item.cost[i] <= parseInt( this.powerLevelValue ) ) {\n              include = true;\n            }\n            break;\n        }\n\n        // if ( powerAbove && item.cost[i] > this.powerLevelValue ) {\n        //   include = true;\n        //   break;\n        // } else if ( !powerAbove && item.cost[i] <= this.powerLevelValue ) {\n        //   include = true;\n        //   break;\n        // }\n      };\n      return include;\n\n    }\n  }\n}\n\nexport default FeatsListCtrl;\n"],"sourceRoot":"/source/"}