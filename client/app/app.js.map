{"version":3,"sources":["app/app.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,UAAU,WAAW,oBAAoB,8CAA8C,sDAAsD,qBAAqB,mBAAmB,cAAc,wBAAwB,yCAAyC,2CAA2C,gCAAgC,iBAAiB,2CAA2C,mDAAmD,oBAAoB,kBAAkB,UAAU,SAAS;EACtgB,IAGK,SAOC,SACD,sBACA,wBACA,aACA,eACA,YACA,gBAGA,YAED;EApBJ,OAAO;IACL,SAAS,CAAC,UAAU,SAAS,IAAI,UAAU,UAAU;MAClD,UAAO,SAAA;OACP,UAAU,kBAAkB,IAAI,UAAU,uCAAuC,IAAI,UAAU,8CAA8C,IAAI,UAAU,kBAAkB,IAAI,UAAU,iBAAiB,IAAI,UAAU,aAAa,IAAI,UAAU,qBAAqB;MAMzQ,UAAO,oBAAP;OAJD,UAAU,qCAAqC;MAK/C,uBAAoB,oCAAA;OAHpB,UAAU,uCAAuC;MAIjD,yBAAsB,sCAAA;OAFtB,UAAU,4BAA4B;MAGtC,cAAW,2BAAA;OADX,UAAU,eAAe;MAEzB,gBAAa,cAAA;OAAb,UAAU,uCAAuC;MACjD,aAAU,sCAAA;OACV,UAAU,+CAA+C;MAAzD,iBAAc,8CAAA;OAEd,UAAU,gBAAgB,IAAI,UAAU,cAAc;MACtD,aAAU,aAAA;;IAEb,SAAS,YAAY;MAtBzB;;MAsBM,MAAM,QAAQ,OAAO,SAAS,CAClC,aACA,eACA,cACA,aACA,qBAAqB,MACrB,uBAAuB,MACvB,YAAY,MACZ,cAAc,MACd,WAAW,MACX,eAAe,MACf,WAAW;;MAGb,IAAI,OAAO,QAAQ;;MAEnB,IAAI,+HAAO,UAAU,oBAAoB,mBAAmB,gBAAgB,eAAe,oBAAoB,iBAAiB;QAC9H,kBAAkB,UAAU;UAC1B,SAAS;UACT,aAAa;;QAEf,cAAc,cAAc;;QAE5B,mBAAmB,UAAU;;QAE7B,mBAAmB,MAAM,WACpB,eAAe,UAAU;UACxB,WAAW;UACX,SAAS;UACT,SAAS;UACT,SAAS;WAEV,cAAc;;QAEnB,mBAAmB,MAAM,QACpB,eAAe,UAAU;UACxB,WAAW;UACX,SAAS;UACT,SAAS;UACT,SAAS;WAEV;;QAEL,gBACM,eAAe;;;;QAIrB,eAAe,MAAM,UAAU;UAC7B,KAAK;UACL,yCAAY,SAAA,WAAS,QAAQ,QAAQ,MAAM;YACzC,KAAK;YACL,OAAO,WAAY,YAAY;cAC7B,OAAO,GAAG,SAAS,IAAI,EAAE,QAAQ;;;UAGrC,cAAc;;;;;;MAMlB,IAAI,iDAAI,UAAU,YAAY,QAAQ,UAAU,MAAM;;QAEpD,WAAW,IAAI,qBAAqB,UAAU,OAAO,MAAM;UACzD,IAAK,KAAK,SAAS,WAAW,KAAK,SAAS,YAAY,CAAC,KAAK,UAAW;YACvE,KAAK,aAAc;;UAErB,IAAK,KAAK,cAAe;YACvB,KAAK,gBAAiB,UAAC,UAAa;;;cAGlC,IAAI,KAAK,gBAAgB,CAAC,UAAU;gBAClC,MAAM;gBACN,OAAO,GAAG,SAAS,IAAI,EAAE,QAAQ;qBAC5B,IAAK,KAAK,gBAAgB,YAAY,KAAK,SAAS,KAAK,eAAe,MAAQ;gBACrF,OAAO,GAAI,KAAK,MAAM,IAAI,EAAE,QAAQ;;;;;;;MAO9C,IAAI,UAAU,wBAAa,UAAU,QAAQ;QAC3C,OAAO,YAAY;UACjB,OAAO;;;;;MAKX,QAAQ,QAAQ,UAAU,MAAM,YAAW;QACzC,QAAQ,UAAU,SAAS,MAAM,CAAE,IAAI,OAAQ;;;MAX3C,QAAQ,WAgBC;;;;;wCAXyB","file":"app/app.js","sourcesContent":["'use strict';\n\n\nimport 'lodash';\nimport angular from 'angular';\nimport 'angular-material';\nimport 'angular-material/angular-material.min.css!';\nimport 'angular-material/angular-material.layouts.min.css!';\nimport 'angular-ui-router';\nimport 'angular-cookies';\nimport 'oclazyload';\nimport {routing} from 'common/utils/routing';\nimport authBroadcastService from 'common/services/authBroadcast.service';\nimport authInterceptorService from 'common/services/authInterceptor.service';\nimport authService from 'common/services/auth.service';\nimport configService from 'config/config';\nimport loginModal from 'common/directives/loginModal/loginModal';\nimport loginComponent from 'common/directives/loginComponent/loginComponent';\nimport 'common/core.css!';\n\nimport homeModule from 'app/home/home';\n\nconst app = angular.module('olrpg', [\n  'ui.router',\n  'oc.lazyLoad',\n  'ngMaterial',\n  'ngCookies',\n  authBroadcastService.name,\n  authInterceptorService.name,\n  authService.name,\n  configService.name,\n  loginModal.name,\n  loginComponent.name,\n  homeModule.name\n]);\n\napp.config(routing(app));\n\napp.config(function ($urlRouterProvider, $locationProvider, $stateProvider, $httpProvider, $mdThemingProvider, $mdIconProvider) {\n  $locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n  });\n  $httpProvider.useApplyAsync(true);\n\n  $urlRouterProvider.otherwise('/');\n\n  $mdThemingProvider.theme('default')\n      .primaryPalette('purple', {\n        'default': '700',\n        'hue-1': '300',\n        'hue-2': '500',\n        'hue-3': '50'\n      })\n      .accentPalette('light-green');\n\n  $mdThemingProvider.theme('dark')\n      .primaryPalette('purple', {\n        'default': '700',\n        'hue-1': '300',\n        'hue-2': '500',\n        'hue-3': '50'\n      })\n      .dark();\n\n  $mdIconProvider\n       .defaultIconSet('assets/svg/sprite.stack.svg');       // Register a default set of SVG icons\n\n  // the abstract state for login simply calls\n  // Auth.logout() and redirects to the /login route\n  $stateProvider.state('logout', {\n    url: '/logout',\n    controller: function($scope, $state, Auth) {\n      Auth.logout();\n      $scope.$evalAsync( function () {\n        $state.go('login', {}, { reload: true });\n      });\n    },\n    authenticate: false\n  });\n});\n\n// enforce login / logout / and separate\n// \"guest\" vs. authenticated-only routes\napp.run(function ($rootScope, $state, $timeout, Auth) {\n  // Redirect to login if route requires auth and you're not logged in\n  $rootScope.$on('$stateChangeStart', function (event, next) {\n    if ( next.name !== 'login' && next.name !== 'logout' && !next.abstract ) {\n      Auth.setNextRoute( next );\n    }\n    if ( next.authenticate ) {\n      Auth.isLoggedInAsync( (loggedIn) => {\n        // prevent routing if the next route requires authentication\n        // & we have no user\n        if (next.authenticate && !loggedIn) {\n          event.preventDefault();\n          $state.go('login', {}, { reload: true });\n        } else if ( next.authenticate && loggedIn && next.name !== Auth.getNextRoute().name )  {\n          $state.go( next.name, {}, { reload: false });\n        }\n      });\n    }\n  });\n});\n\napp.directive('ngViewFix', function ($state) {\n  return function () {\n    $state.reload();\n  };\n});\n\n// bootstrap our application\nangular.element(document).ready(function() {\n  angular.bootstrap(document.body, [ app.name ], {\n    // strictDi: true // turning off for now\n  });\n});\n\nexport default app;\n"],"sourceRoot":"/source/"}