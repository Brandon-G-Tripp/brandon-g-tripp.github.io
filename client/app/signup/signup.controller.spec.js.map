{"version":3,"sources":["app/signup/signup.controller.spec.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,WAAW,iBAAiB,QAAQ,SAAS,cAAc,wBAAwB,UAAU,SAAS;EACrH,IADK,SAEA,MACA,OACA,WAEA,kBAGD;EAPJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;OAKP,UAAU,eAAe,IAAI,UAAU,OAAO;MAH9C,OAAI,MAAA;OAKJ,UAAU,QAAQ;MAJlB,QAAK,OAAA;OAML,UAAU,YAAY;MALtB,YAAS,WAAA;OAOT,UAAU,mBAAmB;MAL7B,mBAAgB,kBAAA;;IAQnB,SAAS,YAAY;MACnB;;MAPN,KAAK,IAAI;MACH,SAAS,KAAK;;MAEpB,SAAS,0BAA0B,YAAM;QACvC,IAAI,aAAU;QACd,IAAI,aAAU;QACd,IAAI,SAAM;QACV,IAAI,WAAQ;QACZ,IAAI,OAAI;;QAER,WAAW,QAAQ,KAAK,OAAO,iBAAiB;;QAEhD,WAAW,OAAO,UAAC,aAAa,cAAiB;UAC/C,aAAa;UACb,SAAS;YACP,IAAI,MAAM;;UAEZ,WAAW;UACX,OAAO;YACL,YAAY,MAAM,OAAO,QAAQ,QAAQ;;;UAG3C,aAAa,YAAY,cAAc,EAAE,QAAA,QAAQ,UAAA,UAAU,MAAA;;;QAG7D,SAAS,iBAAiB,YAAM;UAC9B,WAAW,YAAM;YACf,WAAW,WAAW,SAAS;YAC/B,WAAW,WAAW,aAAa;YACnC,WAAW,OAAO;cAChB,WAAW;cACX,UAAU;cACV,OAAO;cACP,UAAU;;;;UAId,GAAG,4CAA4C,YAAM;YACnD,WAAW,WAAW,SAAS;YAC/B,WAAW;YACX,OAAO,KAAK,YAAY,IAAI,GAAG,KAAK,KAAK;;;UAG3C,GAAG,0DAA0D,YAAM;YACjE,WAAW,WAAW,aAAa;YACnC,WAAW;YACX,OAAO,KAAK,YAAY,IAAI,GAAG,KAAK,KAAK;;;UAG3C,GAAG,qCAAqC,YAAM;YAC5C,WAAW;YACX,OAAO,KAAK,WAAW,KAAK,GAAG,IAAI,GAAG,KAAK,MAAM;cAC/C,WAAY,WAAW,KAAK;cAC5B,UAAY,WAAW,KAAK;cAC5B,OAAY,WAAW,KAAK;cAC5B,UAAY,WAAW,KAAK;;;;UAIhC,GAAG,+CAA+C,UAAC,MAAS;YAC1D,IAAM,oBAAoB,IAAI,QAAQ;YACtC,KAAK,aAAa,MAAM,OAAO,QAAQ;;YAEvC,WAAW;;YAEX,kBAAkB,KAAK,YAAM;cAC3B,OAAO,OAAO,IAAI,GAAG,KAAK,KAAK,WAAW,WAAW,MAAM,EAAE,QAAQ;cACrE;eACA,SACK;;;UAGT,GAAG,qCAAqC,UAAC,MAAS;YAChD,IAAM,MAAM;cACV,MAAM,EAAE,MAAM,KAAK,SAAS;;YAE9B,IAAM,oBAAoB,IAAI,QAAQ,OAAO;YAC7C,KAAK,aAAa,MAAM,OAAO,QAAQ;;YAEvC,WAAW;;YAEX,kBAAiB,SAAO,YAAM;cAC5B,OAAO,WAAW,OAAO,MAAM,GAAG,KAAK,MAAM,IAAI;cACjD;eACA,SACK;;;UAGT,GAAG,wDAAwD,UAAC,MAAS;YACnE,IAAM,MAAM;cACV,MAAM,EAAE,MAAM,KAAK,SAAS;;YAE9B,IAAM,oBAAoB,IAAI,QAAQ,OAAO;YAC7C,KAAK,aAAa,MAAM,OAAO,QAAQ;;YAEvC,WAAW;;YAEX,kBAAiB,SAAO,YAAM;cAC5B,OAAO,WAAW,WAAW,YAAY,GAAG,GAAE;cAC9C;eACA,SACK;;;;;;GAYV","file":"app/signup/signup.controller.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport signupController from './signup.controller';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('controller: SignupCtrl', () => {\n  let $rootScope;\n  let controller;\n  let $state;\n  let $animate;\n  let Auth;\n\n  beforeEach(angular.mock.module(signupController.name));\n\n  beforeEach(inject(($controller, _$rootScope_) => {\n    $rootScope = _$rootScope_;\n    $state = {\n      go: sinon.stub()\n    };\n    $animate = {};\n    Auth = {\n      createUser: sinon.stub().returns(Promise.resolve())\n    };\n\n    controller = $controller('SignupCtrl', { $state, $animate, Auth });\n  }));\n\n  describe('signup method', () => {\n    beforeEach(() => {\n      controller.signupForm.$valid = true;\n      controller.signupForm.$submitted = false;\n      controller.user = {\n        firstname: 'firstName',\n        lastname: 'lastName',\n        email: 'anEmail',\n        password: 'aPassword'\n      };\n    });\n\n    it('does nothing if signupForm is not $valid', () => {\n      controller.signupForm.$valid = false;\n      controller.signup();\n      expect(Auth.createUser).not.to.have.been.called;\n    });\n\n    it('does nothing if signupForm has already been $submitted', () => {\n      controller.signupForm.$submitted = true;\n      controller.signup();\n      expect(Auth.createUser).not.to.have.been.called;\n    });\n\n    it('creates the user for a valid form', () => {\n      controller.signup();\n      expect(Auth.createUser.args[0][0]).to.deep.equal({\n        firstName:  controller.user.firstname,\n        lastName:   controller.user.lastname,\n        email:      controller.user.email,\n        password:   controller.user.password\n      });\n    });\n\n    it('goes to the content state after saving user', (done) => {\n      const createUserPromise = new Promise.resolve();\n      Auth.createUser = sinon.stub().returns(createUserPromise);\n\n      controller.signup();\n\n      createUserPromise.then(() => {\n        expect($state.go).to.have.been.calledWith('content', null, { reload: true });\n        done();\n      })\n      .catch(done);\n    });\n\n    it('catches errors when saving a user', (done) => {\n      const err = {\n        data: { code: 401, message: 'Not Authorized' }\n      };\n      const createUserPromise = new Promise.reject(err);\n      Auth.createUser = sinon.stub().returns(createUserPromise);\n\n      controller.signup();\n\n      createUserPromise.catch(() => {\n        expect(controller.errors[401]).to.deep.equal(err.data);\n        done();\n      })\n      .catch(done);\n    });\n\n    it('allows the form to be submitted again after an error', (done) => {\n      const err = {\n        data: { code: 401, message: 'Not Authorized' }\n      };\n      const createUserPromise = new Promise.reject(err);\n      Auth.createUser = sinon.stub().returns(createUserPromise);\n\n      controller.signup();\n\n      createUserPromise.catch(() => {\n        expect(controller.signupForm.$submitted).to.be.false;\n        done();\n      })\n      .catch(done);\n    });\n  });\n\n});\n"],"sourceRoot":"/source/"}