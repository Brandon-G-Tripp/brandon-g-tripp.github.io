{"version":3,"sources":["app/boons/boonsList.controller.js"],"names":["angular","boons","BoonsListCtrl","$scope","$location","$mdMedia","Config","Link","items","filterAttributes","_","uniq","flatten","map","attr","name","selectedAttributes","searchQuery","searchText","powerLevelValue","$$search","All","isEmpty","Object","keys","forEach","val","find","push","power","$watch","newVal","oldVal","search","newAttrs","filter","length","addedAttr","difference","addedAttrIndex","findIndex","uniqBy","Promise","resolve","then","alreadyUsed","selected","toLowerCase","match","thisPower","item","includes","regex","RegExp","show","inAttackFilter","description","effect","searchAttrs","copy","without","intersection","attribute","include","compact","i","intersectAttributes"],"mappings":"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","file":"boonsList.controller.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport 'lodash';\nimport boons from './boons.json!'\n\nclass BoonsListCtrl {\n\n  // called once when the class is instantiated\n  constructor ($scope, $location, $mdMedia, Config, Link) {\n\n    this.$scope = $scope;\n    this.$location = $location;\n    this.$scope.$mdMedia = $mdMedia;\n    this.Config = Config;\n    this.Link = Link;\n    this.items = boons || [];\n\n    // actively generate a uniq array of all attributes used in the json resource\n    this.filterAttributes = _.uniq( _.flatten(_.map(boons, 'attribute')) ).map( attr => { return { name: attr }});\n\n    this.selectedAttributes = [];\n    this.searchQuery = '';\n    this.searchText = '';\n    this.powerLevelValue = this.$location.$$search.All || 9;\n\n    if ( !_.isEmpty( this.$location.$$search ) ) {\n      this.selectedAttributes = [];\n      Object.keys(this.$location.$$search).forEach( (val ) => {\n        if ( _.find( this.filterAttributes, { name: val }) ) {\n          this.selectedAttributes.push({ name: val, power: this.$location.$$search[val] });\n        }\n      });\n    }\n\n    this.$scope.$watch('boonsCtrl.powerLevelValue', (newVal, oldVal) => {\n      if ( this.$location.$$search.All ) {\n        this.$location.search( 'All', newVal )\n      }\n    }, true);\n\n    // watch for changes to selectedItems filter, remove them from the querystring\n    // if they are present\n    this.$scope.$watch('boonsCtrl.selectedAttributes', (newVal, oldVal) => {\n\n      // clear all params\n      this.$location.$$search = {};\n\n      // store all of the standard attributes other than 'All'\n      const newAttrs =  newVal.filter( attr => attr.name !== 'All' );\n\n      // when adding a new item, always set it's power level to the value from\n      // the UI dropdown\n      if ( newVal.length > oldVal.length ) {\n        const addedAttr = _.difference( _.map(newAttrs, 'name'), _.map(oldVal, 'name') );\n        const addedAttrIndex = _.findIndex( newAttrs, { name: addedAttr[0] });\n        if ( addedAttrIndex > -1 ) {\n          newAttrs.map( attr => {\n            if ( addedAttr[0] === attr.name ) {\n              attr.power = `${ this.powerLevelValue }`;\n            }\n          });\n        }\n      }\n\n      // prevent duplicate instances of a given key\n      newVal = _.uniqBy( newVal, 'name' );\n\n      if ( _.isEmpty( newVal ) ) {\n        newVal = [{ name: 'All' }];\n      } else if ( newAttrs.length > 0 ) {\n        newVal = newAttrs;\n      }\n\n      newVal.map( attr => {\n        attr.power = attr.power || `${ this.powerLevelValue }`;\n        return attr;\n      });\n\n      // set all incoming newVal params\n      newVal.forEach( attr => {\n        this.$location.search( attr.name, attr.power );\n      });\n\n      this.selectedAttributes = newVal;\n\n    }, true);\n\n  }\n\n  // public class methods\n  updateSearchTextModel (val) {\n    this.searchText = val;\n  }\n\n  attackAttrSearchFilter () {\n    // return all the options if the user hasn't selected a filter\n    return Promise.resolve().then( () => {\n      return this.filterAttributes.filter( attr => {\n        const alreadyUsed = this.selectedAttributes.filter( selected => selected.name === attr.name );\n        if ( alreadyUsed.length > 0 ) {\n          return false;\n        } else if ( this.searchText === '' ) {\n          return true;\n        } else {\n          return attr.name.toLowerCase().match( this.searchText.toLowerCase() );\n        }\n      });\n   });\n  }\n\n  textSearchFilter () {\n    // if `searchQuery` is empty, we want to show all list items\n    return (thisPower) => {\n      var item = thisPower;\n      if ( this.searchQuery === '' && _.includes( this.selectedAttributes, 'All' ) ) {\n        return true;\n      }\n      var regex = new RegExp(this.searchQuery, 'gi');\n      var show = false; // initially we assume that we won't show a given result\n      var inAttackFilter = true;\n      // now we look for matches in the following object properties\n      show = item.name.match(regex) || item.description.match(regex) || item.effect.match(regex);\n      // if the selectedAttributes array is longer than 0, we need to show\n      // only results that match one of the selected properties\n      if ( this.selectedAttributes.length > 0 ) {\n        var inAttackFilter = false;\n        if ( _.find( this.selectedAttributes, { name: 'All' } )  ) {\n          inAttackFilter = true;\n        } else {\n          var searchAttrs = angular.copy( _.without( this.selectedAttributes, 'All' ) );\n          var inAttackFilter = _.intersection( item.attribute, _.map(searchAttrs, 'name') ).length > 0;\n        }\n      }\n      // return the result (either `true` or `false`)\n      return show && inAttackFilter;\n    }\n  }\n\n  powerLevelFilter () {\n    return (thisPower) => {\n      let item = thisPower;\n      let include = false;\n      if ( this.$location.$$search.All === '9' ) return true;\n\n      // if there are any querystring search params\n      if ( _.compact( _.map( this.selectedAttributes, 'power' ) ).length > 0 ) {\n        for (var i = 0; i <= item.power.length; i++) {\n          // find the intersection between attributes in this power and\n          // attributes that are also in active parameters\n          let intersectAttributes = _.intersection( item.attribute, _.map( this.selectedAttributes, 'name' ) );\n          if ( this.$location.$$search.All >= item.power[0] ) {\n            include = true;\n            return include;\n          } else if ( intersectAttributes.length > 0 ) {\n            intersectAttributes.forEach( (attr) => {\n              if ( this.$location.$$search[attr] >= item.power[0] || this.$location.$$search[attr] >= item.power[0] ) {\n                include = true;\n              }\n            });\n            return include;\n          }\n        };\n      }\n\n      return include;\n    }\n  }\n}\n\nexport default BoonsListCtrl;\n"]}