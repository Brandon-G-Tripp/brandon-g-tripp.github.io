{"version":3,"sources":["common/services/authBroadcast.service.spec.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,WAAW,iBAAiB,QAAQ,SAAS,cAAc,4BAA4B,UAAU,SAAS;EACzH,IADK,SAEA,MACA,OACA,WAEA,qBAGD;EAPJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;OAKP,UAAU,eAAe,IAAI,UAAU,OAAO;MAH9C,OAAI,MAAA;OAKJ,UAAU,QAAQ;MAJlB,QAAK,OAAA;OAML,UAAU,YAAY;MALtB,YAAS,WAAA;OAOT,UAAU,uBAAuB;MALjC,sBAAmB,sBAAA;;IAQtB,SAAS,YAAY;MACnB;;MAPN,KAAK,IAAI;MACH,SAAS,KAAK;;MAEpB,SAAS,0BAA0B,YAAM;QACvC,IAAI,aAAU;QACd,IAAI,gBAAa;QACjB,IAAI,cAAW;;QAEf,WAAW,eAAe,QAAQ,KAAK,OAAO,oBAAoB;;QAElE,WAAW,OAAO,UAAC,cAAc,iBAAiB,eAAkB;UAClE,aAAa;UACb,gBAAgB;UAChB,cAAc;;;QAGhB,WAAW,gCAAgC,YAAM;UAC/C,MAAM,IAAI,YAAY;;;QAGxB,UAAU,oCAAoC,YAAM;UAClD,WAAW,WAAW;;;QAGxB,GAAG,YAAY,YAAM;;QAErB,SAAS,mBAAmB,YAAM;UAChC,GAAG,qEAAqE,YAAM;YAC5E,IAAM,MAAM;cACV,MAAM,EAAE,OAAO;cACf,QAAQ;;YAEV,cAAc,SAAS;;YAEvB,OAAO,WAAW,YAAY,GAAG,KAAK,KAAK,WAAW,YAAY,cAAc;;;UAGlF,GAAG,qDAAqD,YAAM;YAC5D,IAAM,MAAM;cACV,MAAM;cACN,QAAQ;;YAEV,cAAc,SAAS;;YAEvB,OAAO,WAAW,YAAY,IAAI,GAAG,KAAK,KAAK;;;;QAInD,SAAS,wBAAwB,YAAM;UACrC,GAAG,6EAA6E,YAAM;YACpF,IAAM,MAAM;cACV,MAAM;cACN,QAAQ;;YAEV,cAAc,cAAc;;YAE5B,OAAO,WAAW,YAAY,GAAG,KAAK,KAAK,WAAW,YAAY,aAAa;;;UAGjF,GAAE,yEAA0E,YAAM;YAChF,IAAM,MAAM;cACV,MAAM,EAAE,MAAM;cACd,QAAQ;;YAEV,cAAc,cAAc;;YAE5B,OAAO,WAAW,YAAY,GAAG,KAAK,KAAK,WAAW,YAAY,aAAa;;;UAGjF,GAAE,6EAA8E,YAAM;YACpF,IAAM,MAAM;cACV,MAAM,EAAE,MAAM;cACd,QAAQ;;YAEV,cAAc,cAAc;;YAE5B,OAAO,WAAW,YAAY,GAAG,KAAK,KAAK,WAAW,YAAY,gBAAgB;;;UAGpF,GAAG,iDAAiD,YAAM;YACxD,IAAM,MAAM;cACV,MAAM,EAAE,MAAM;;YAEhB,cAAc,cAAc;;YAE5B,OAAO,WAAW,YAAY,IAAI,GAAG,KAAK,KAAK;;;;;;GAelD","file":"authBroadcast.service.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport authBroadcastModule from './authBroadcast.service';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('service: authBroadcast', () => {\n  let $rootScope;\n  let authBroadcast;\n  let AUTH_EVENTS;\n\n  beforeEach('mock module', angular.mock.module(authBroadcastModule.name));\n\n  beforeEach(inject((_$rootScope_, _authBroadcast_, _AUTH_EVENTS_) => {\n    $rootScope = _$rootScope_;\n    authBroadcast = _authBroadcast_;\n    AUTH_EVENTS = _AUTH_EVENTS_;\n  }));\n\n  beforeEach('spy on the $broadcast method', () => {\n    sinon.spy($rootScope, '$broadcast');\n  });\n\n  afterEach('release spy on $broadcast method', () => {\n    $rootScope.$broadcast.restore();\n  });\n\n  it('foo bar!', () => {});\n\n  describe('response method', () => {\n    it('broadcasts the AUTH_EVENTS.loginSuccess event for status code 200', () => {\n      const res = {\n        data: { token: '123' },\n        status: 200\n      };\n      authBroadcast.response(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.loginSuccess, res);\n    });\n\n    it('broadcasts nothing for status code other than 200', () => {\n      const res = { \n        data: {},\n        status: 201\n      };\n      authBroadcast.response(res);\n\n      expect($rootScope.$broadcast).not.to.have.been.called;\n    });\n  });\n\n  describe('responseError method', () => {\n    it('broadcasts a server error if status code is 500 and no code is recognized', () => {\n      const res = {\n        data: {},\n        status: 500\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.serverError, res);\n    });\n\n    it(`broadcasts a loginFailed error if the code is 'authentication.failed'`, () => {\n      const res = {\n        data: { code: 'authentication.failed' },\n        status: 500\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.loginFailed, res);\n    });\n\n    it(`broadcasts a sessionTimeout error if the code is 'authentication.invalid'`, () => {\n      const res = {\n        data: { code: 'authentication.invalid' },\n        status: 500\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.sessionTimeout, res);\n    });\n\n    it('does nothing if there is no status on the res', () => {\n      const res = {\n        data: { code: 'authentication.invalid' }\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).not.to.have.been.called;\n    });\n  });\n});\n"]}