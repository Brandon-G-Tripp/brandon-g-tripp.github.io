{"version":3,"sources":["common/services/authBroadcast.service.spec.js"],"names":["angular","chai","sinon","sinonChai","authBroadcastModule","use","expect","describe","$rootScope","authBroadcast","AUTH_EVENTS","beforeEach","mock","module","name","inject","_$rootScope_","_authBroadcast_","_AUTH_EVENTS_","spy","afterEach","$broadcast","restore","it","res","data","token","status","response","to","have","been","calledWith","loginSuccess","not","called","responseError","serverError","code","loginFailed","sessionTimeout"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,WAAW,iBAAiB,QAAQ,SAAS,cAAc,4BAA4B,UAAU,SAAS,UAAU;EACnI;;EAEA,IAAI,SAAS,MAAM,OAAO,WAAW,qBAAqB;EAC1D,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAP3BA,UAQS,SAAS;OAClB,UAAU,eAAe,IAAI,UAAU,OAAO;MAP9CC,OAQM,MAAM;OACZ,UAAU,QAAQ;MARlBC,QASO,OAAO;OACd,UAAU,YAAY;MATtBC,YAUW,WAAW;OACtB,UAAU,uBAAuB;MATjCC,sBAUqB,sBAAsB;;IAE9C,SAAS,YAAY;MAVzBH,KAAKI,IAAIF;MACHG,SAASL,KAAKK;MAEpBC,SAAS,0BAA0B,YAAM;QACvC,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QAEJC,WAAW,eAAeX,QAAQY,KAAKC,OAAOT,oBAAoBU;QAElEH,WAAWI,OAAO,UAACC,cAAcC,iBAAiBC,eAAkB;UAClEV,aAAaQ;UACbP,gBAAgBQ;UAChBP,cAAcQ;;QAGhBP,WAAW,gCAAgC,YAAM;UAC/CT,MAAMiB,IAAIX,YAAY;;QAGxBY,UAAU,oCAAoC,YAAM;UAClDZ,WAAWa,WAAWC;;QAGxBC,GAAG,YAAY,YAAM;QAErBhB,SAAS,mBAAmB,YAAM;UAChCgB,GAAG,qEAAqE,YAAM;YAC5E,IAAMC,MAAM;cACVC,MAAM;gBAAEC,OAAO;;cACfC,QAAQ;;YAEVlB,cAAcmB,SAASJ;YAEvBlB,OAAOE,WAAWa,YAAYQ,GAAGC,KAAKC,KAAKC,WAAWtB,YAAYuB,cAAcT;;UAGlFD,GAAG,qDAAqD,YAAM;YAC5D,IAAMC,MAAM;cACVC,MAAM;cACNE,QAAQ;;YAEVlB,cAAcmB,SAASJ;YAEvBlB,OAAOE,WAAWa,YAAYa,IAAIL,GAAGC,KAAKC,KAAKI;;;QAInD5B,SAAS,wBAAwB,YAAM;UACrCgB,GAAG,6EAA6E,YAAM;YACpF,IAAMC,MAAM;cACVC,MAAM;cACNE,QAAQ;;YAEVlB,cAAc2B,cAAcZ;YAE5BlB,OAAOE,WAAWa,YAAYQ,GAAGC,KAAKC,KAAKC,WAAWtB,YAAY2B,aAAab;;UAGjFD,GAAE,yEAA0E,YAAM;YAChF,IAAMC,MAAM;cACVC,MAAM;gBAAEa,MAAM;;cACdX,QAAQ;;YAEVlB,cAAc2B,cAAcZ;YAE5BlB,OAAOE,WAAWa,YAAYQ,GAAGC,KAAKC,KAAKC,WAAWtB,YAAY6B,aAAaf;;UAGjFD,GAAE,6EAA8E,YAAM;YACpF,IAAMC,MAAM;cACVC,MAAM;gBAAEa,MAAM;;cACdX,QAAQ;;YAEVlB,cAAc2B,cAAcZ;YAE5BlB,OAAOE,WAAWa,YAAYQ,GAAGC,KAAKC,KAAKC,WAAWtB,YAAY8B,gBAAgBhB;;UAGpFD,GAAG,iDAAiD,YAAM;YACxD,IAAMC,MAAM;cACVC,MAAM;gBAAEa,MAAM;;;YAEhB7B,cAAc2B,cAAcZ;YAE5BlB,OAAOE,WAAWa,YAAYa,IAAIL,GAAGC,KAAKC,KAAKI;;;;;;GAOlD","file":"authBroadcast.service.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport authBroadcastModule from './authBroadcast.service';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('service: authBroadcast', () => {\n  let $rootScope;\n  let authBroadcast;\n  let AUTH_EVENTS;\n\n  beforeEach('mock module', angular.mock.module(authBroadcastModule.name));\n\n  beforeEach(inject((_$rootScope_, _authBroadcast_, _AUTH_EVENTS_) => {\n    $rootScope = _$rootScope_;\n    authBroadcast = _authBroadcast_;\n    AUTH_EVENTS = _AUTH_EVENTS_;\n  }));\n\n  beforeEach('spy on the $broadcast method', () => {\n    sinon.spy($rootScope, '$broadcast');\n  });\n\n  afterEach('release spy on $broadcast method', () => {\n    $rootScope.$broadcast.restore();\n  });\n\n  it('foo bar!', () => {});\n\n  describe('response method', () => {\n    it('broadcasts the AUTH_EVENTS.loginSuccess event for status code 200', () => {\n      const res = {\n        data: { token: '123' },\n        status: 200\n      };\n      authBroadcast.response(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.loginSuccess, res);\n    });\n\n    it('broadcasts nothing for status code other than 200', () => {\n      const res = { \n        data: {},\n        status: 201\n      };\n      authBroadcast.response(res);\n\n      expect($rootScope.$broadcast).not.to.have.been.called;\n    });\n  });\n\n  describe('responseError method', () => {\n    it('broadcasts a server error if status code is 500 and no code is recognized', () => {\n      const res = {\n        data: {},\n        status: 500\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.serverError, res);\n    });\n\n    it(`broadcasts a loginFailed error if the code is 'authentication.failed'`, () => {\n      const res = {\n        data: { code: 'authentication.failed' },\n        status: 500\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.loginFailed, res);\n    });\n\n    it(`broadcasts a sessionTimeout error if the code is 'authentication.invalid'`, () => {\n      const res = {\n        data: { code: 'authentication.invalid' },\n        status: 500\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).to.have.been.calledWith(AUTH_EVENTS.sessionTimeout, res);\n    });\n\n    it('does nothing if there is no status on the res', () => {\n      const res = {\n        data: { code: 'authentication.invalid' }\n      };\n      authBroadcast.responseError(res);\n\n      expect($rootScope.$broadcast).not.to.have.been.called;\n    });\n  });\n});\n"]}