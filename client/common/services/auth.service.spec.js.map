{"version":3,"sources":["common/services/auth.service.spec.js"],"names":[],"mappings":"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","file":"common/services/auth.service.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport authServiceModule from './auth.service';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('service: Auth', () => {\n  let User;\n  let Config;\n  let $cookieStore;\n  let $httpBackend;\n  let Auth;\n  let postData;\n  let userInfo;\n  let userObject;\n  let anError;\n\n  beforeEach('set up local test variables', () => {\n    postData = {\n      token: '123abc'\n    };\n    userInfo = {\n      username: 'aUsername',\n      password: 'aPassword'\n    };\n    userObject = {\n      role: 'user'\n    };\n    anError = { code: 400, message: 'foo' };\n  });\n\n  beforeEach('inject mock modules', angular.mock.module(authServiceModule.name, ($provide) => {\n    User = {\n      get(callback) {\n        callback = callback || angular.noop;\n        callback(userObject);\n      },\n      save(data, successCallback) {\n        successCallback({\n          token: '123abc'\n        });\n        return { $promise: Promise.resolve() };\n      }\n    };\n    $provide.value('User', User);\n\n    Config = {\n      urlBase: 'foo'\n    };\n    $provide.value('Config', Config);\n\n    $cookieStore = {\n      get: sinon.spy(),\n      put: sinon.spy(),\n      remove: sinon.spy()\n    };\n\n    $provide.value('$cookieStore', $cookieStore);\n  }));\n\n  beforeEach(inject((_$httpBackend_, _Auth_) => {\n    $httpBackend = _$httpBackend_;\n    Auth = _Auth_;\n  }));\n\n  const verifyBackend = () => {\n    $httpBackend.flush();\n    $httpBackend.verifyNoOutstandingExpectation();\n    $httpBackend.verifyNoOutstandingRequest();\n  };\n\n  describe('login method', () => {\n    it(`posts to urlBase at '/api/auth/login'`, () => {\n      $httpBackend.expectPOST(Config.urlBase + '/api/auth/login')\n        .respond(postData);\n      Auth.login(userInfo);\n      verifyBackend();\n    });\n\n    describe('on successful POST', () => {\n      it('calls callback with no arguments', () => {\n        const callback = sinon.stub();\n\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(postData);\n\n        Auth.login(userInfo, callback);\n        $httpBackend.flush();\n        expect(callback).to.have.been.called;\n        expect(callback).to.have.been.calledWithExactly();\n      });\n\n      it('returns a promise that resolves to the user object', (done) => {\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(postData);\n\n        Auth.login(userInfo)\n          .then((res) => {\n            expect(res).to.equal(userObject);\n            done();\n          })\n          .catch(done);\n\n        $httpBackend.flush();\n      });\n\n      it('adds the token to the $cookieStore', (done) => {\n        const token = '123abc';\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond({ token });\n\n        Auth.login(userInfo)\n          .then(() => {\n            expect($cookieStore.put).to.have.been.calledWith('token', token);\n            done();\n          })\n          .catch(done);\n\n        $httpBackend.flush();\n      });\n    });\n\n    describe('on failed POST', () => {\n      it('calls Auth.logout()', () => {\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(400, anError);\n\n        Auth.logout = sinon.spy();\n        Auth.login(userInfo);\n        $httpBackend.flush();\n        expect(Auth.logout).to.have.been.called;\n      });\n\n      it('calls callback with an error', () => {\n        const callback = sinon.stub();\n\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(400, anError);\n\n        Auth.logout = angular.noop;\n        Auth.login(userInfo, callback);\n        $httpBackend.flush();\n        expect(callback).to.have.been.calledWith(anError);\n      });\n\n      it('returns a promise that rejects with an error object', (done) => {\n        $httpBackend.whenPOST(Config.urlBase + '/api/auth/login')\n          .respond(400, anError);\n\n        Auth.logout = angular.noop;\n        Auth.login(userInfo)\n          .then(null, (err) => {\n            expect(err).to.deep.equal(anError);\n            done();\n          })\n          .catch(done);\n        $httpBackend.flush();\n      });\n    });\n  });\n\n  describe('logout method', () => {\n    it('removes token from $cookieStore', () => {\n      Auth.logout();\n      expect($cookieStore.remove).to.have.been.calledWith('token');\n    });\n  });\n\n  describe('createUser method', () => {\n    it('calls User.save with the user data', () => {\n      sinon.spy(User, 'save');\n      Auth.createUser(userInfo);\n      expect(User.save).to.have.been.called;\n    });\n\n    describe('on successful user creation', () => {\n      it('calls the callback with the original user info', () => {\n        const callback = sinon.spy();\n        Auth.createUser(userInfo, callback);\n        expect(callback).to.have.been.calledWith(userInfo);\n      });\n\n      it('adds the token to the $cookieStore', (done) => {\n        Auth.createUser(userInfo, () => {\n          expect($cookieStore.put).to.have.been.calledWith('token', '123abc');\n          done();\n        });\n      });\n    });\n\n    describe('on failed user creation', () => {\n      let userSaveErr;\n\n      beforeEach('make User.save call the error callback and return a rejected promise', () => {\n        userSaveErr = {};\n        User.save = (user, successCallback, errorCallback) => {\n          errorCallback(userSaveErr);\n          return { $promise: Promise.reject(userSaveErr) };\n        };\n      });\n\n      it('calls the callback with the error', () => {\n        const callback = sinon.spy();\n\n        Auth.createUser(userInfo, callback);\n        expect(callback).to.have.been.calledWith(userSaveErr);\n      });\n\n      it('calls the logout method', () => {\n        sinon.spy(Auth, 'logout');\n        Auth.createUser(userInfo);\n        expect(Auth.logout).to.have.been.called;\n      });\n\n    });\n  });\n\n  describe('for a logged in user', () => {\n    beforeEach('log in a user', () => {\n      $httpBackend.expectPOST(Config.urlBase + '/api/auth/login')\n        .respond(postData);\n\n      Auth.login(userInfo);\n      $httpBackend.flush();\n    });\n\n    it('getCurrentUser() gets current user', () => {\n      expect(Auth.getCurrentUser()).to.equal(userObject);\n    });\n\n    describe('setUserProperty method', () => {\n      it('returns the current user', () => {\n        expect(Auth.setUserProperty('foo', 'bar')).to.equal(userObject);\n      });\n\n      it(`can set a property on the current user if it's previously defined`, () => {\n        const newRole = 'kingslayer';\n        Auth.setUserProperty('role', newRole);\n        expect(Auth.getCurrentUser()).to.have.property('role', newRole);\n      });\n\n      it(`can't set a property on the current user if it wasn't previously defined`, () => {\n        Auth.setUserProperty('height', 10);\n        expect(Auth.getCurrentUser()).not.to.have.property('height');\n      });\n    });\n\n    it('isLoggedIn() is true', () => {\n      expect(Auth.isLoggedIn()).to.be.true;\n    });\n\n    it('isAdmin() checks the currentUser.role', () => {\n      userObject.role = 'admin';\n      expect(Auth.isAdmin()).to.be.true;\n\n      userObject.role = 'user';\n      expect(Auth.isAdmin()).to.be.false;\n    });\n  });\n});\n"],"sourceRoot":"/source/"}