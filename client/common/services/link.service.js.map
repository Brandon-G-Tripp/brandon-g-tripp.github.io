{"version":3,"sources":["common/services/link.service.js"],"names":["angular","configService","linkServiceModule","module","Link","Config","$mdDialog","$log","name","split","trim","join","toLowerCase","items","path","urlString","forEach","item","i","urlBase","nameToUrlPath","document","queryCommandSupported","copyTextToClipboard","text","textArea","createElement","style","position","top","left","width","height","padding","border","outline","boxShadow","background","value","body","appendChild","select","successful","execCommand","msg","info","err","removeChild","bind","show","alert","clickOutsideToClose","title","textContent","ariaLabel","ok","service"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,WAAW,kBAAkB,UAAU,SAAS,UAAU;EACzE;;EAEA,IAAI,SAAS,eAAe,mBAAmB;;EAE/C,SAAS,gBAAgB,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;EAEhH,SAAS,kBAAkB,QAAQ,OAAO,EAAE,KAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,EAAE,IAAI,aAAa,MAAM,IAAI,WAAW,aAAa,WAAW,cAAc,OAAO,WAAW,eAAe,MAAM,IAAI,WAAW,YAAY,WAAW,WAAW,MAAM,OAAO,eAAe,QAAQ,WAAW,KAAK;;EAE7S,SAAS,aAAa,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,kBAAkB,YAAY,WAAW,aAAa,IAAI,aAAa,kBAAkB,aAAa,cAAc,OAAO;;EAEzM,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAZ3BA,UAaS,SAAS;OAClB,UAAU,eAAe;MAbzBC,gBAce,cAAc;;IAEhC,SAAS,YAAY;MAdnBC,oBAAoBF,QAAQG,OAAO,mBAAmB,CAC1DF;;MAGIG;;MAeA,YAAY;QAdhB,SAAA,KAAaC,QAAQC,WAAWC,MAAM;UAAA,gBAAA,MAAA;;UACpC,KAAKF,SAASA;UACd,KAAKC,YAAYA;UACjB,KAAKC,OAAOA;;;QAoBR,aAAa,MAAM,CAAC;UAClB,KAAK;UACL,OAAO,SAAS,cAnBTC,MAAM;YACnB,OAAOA,KAAKC,MAAM,KAAK,GAAGC,OAAOD,MAAM,KAAKE,KAAK,KAAKC;;WAqB/C;UACD,KAAK;UACL,OAAO,SAAS,eApBTC,OAAOC,MAAM;YAAA,IAAA,QAAA;;YAE1B,IAAIC,YAAY;YAChBF,MAAMG,QAAQ,UAACC,MAAMC,GAAM;cACzB,IAAIA,IAAI,GAAG;gBACTH,aAAa;;;cAGfA,aAAS,GAAA,OAAQ,MAAKV,OAAOc,SAApB,OAAgCL,MAAhC,KAAA,OAA2C,MAAKM,cAAcH,KAAKT;;;YAG9E,IAAIa,SAASC,sBAAsB,SAAS;cAE1C,IAAMC,sBAAsB,SAAtBA,oBAAgCC,MAAM;;gBAE1C,IAAIC,WAAWJ,SAASK,cAAc;;gBAGtCD,SAASE,MAAMC,WAAW;gBAC1BH,SAASE,MAAME,MAAM;gBACrBJ,SAASE,MAAMG,OAAO;;;gBAItBL,SAASE,MAAMI,QAAQ;gBACvBN,SAASE,MAAMK,SAAS;;gBAGxBP,SAASE,MAAMM,UAAU;;gBAGzBR,SAASE,MAAMO,SAAS;gBACxBT,SAASE,MAAMQ,UAAU;gBACzBV,SAASE,MAAMS,YAAY;;gBAG3BX,SAASE,MAAMU,aAAa;gBAE5BZ,SAASa,QAAQd;gBAEjBH,SAASkB,KAAKC,YAAYf;gBAE1BA,SAASgB;;gBAET,IAAI;kBACF,IAAMC,aAAarB,SAASsB,YAAY;kBACxC,IAAMC,MAAMF,aAAa,eAAe;kBACxC,KAAKnC,KAAKsC,KAAK,8BAA8BD;kBAC7C,OAAOE,KAAK;kBACZ,KAAKvC,KAAKsC,KAAK;;;gBAGjBxB,SAASkB,KAAKQ,YAAYtB;;;cAI5BF,oBAAoByB,KAAK,MAAMjC;mBAE1B;cACL,KAAKT,UAAU2C,KACb,KAAK3C,UAAU4C,QACZC,oBAAoB,MACpBC,MAAM,4BACNC,YAAY,yEACZC,UAAU,4BACVC,GAAG;cAER,KAAKhD,KAAKsC,KAAK9B;;;;;;QASb,OAAO;;;MAHfb,kBAAkBsD,QAAQ,QAAQpD;;MAQ5B,QAAQ,WANCF;;;GASZ","file":"link.service.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport configService from 'config/config';\n\nconst linkServiceModule = angular.module('link.service.js', [\n  configService\n]);\n\nclass Link {\n  constructor (Config, $mdDialog, $log) {\n    this.Config = Config;\n    this.$mdDialog = $mdDialog;\n    this.$log = $log;\n  }\n\n  nameToUrlPath (name) {\n    return name.split('(')[0].trim().split(' ').join('_').toLowerCase();\n  }\n\n  copyLinkToClip(items, path) {\n\n    let urlString = '';\n    items.forEach((item, i) => {\n      if (i > 0) {\n        urlString += ',';\n      }\n\n      urlString += `${ this.Config.urlBase }${ path }/${  this.nameToUrlPath(item.name) }`;\n    });\n\n    if (document.queryCommandSupported('copy')) {\n\n      const copyTextToClipboard = function (text) {\n        // create a temporary textarea to give it focus and then copy to clipboard\n        let textArea = document.createElement('textarea');\n\n        // Place in top-left corner of screen regardless of scroll position.\n        textArea.style.position = 'fixed';\n        textArea.style.top = 0;\n        textArea.style.left = 0;\n\n        // Ensure it has a small width and height. Setting to 1px / 1em\n        // doesn't work as this gives a negative w/h on some browsers.\n        textArea.style.width = '2em';\n        textArea.style.height = '2em';\n\n        // We don't need padding, reducing the size if it does flash render.\n        textArea.style.padding = 0;\n\n        // Clean up any borders.\n        textArea.style.border = 'none';\n        textArea.style.outline = 'none';\n        textArea.style.boxShadow = 'none';\n\n        // Avoid flash of white box if rendered for any reason.\n        textArea.style.background = 'transparent';\n\n        textArea.value = text;\n\n        document.body.appendChild(textArea);\n\n        textArea.select();\n\n        try {\n          const successful = document.execCommand('copy');\n          const msg = successful ? 'successful' : 'unsuccessful';\n          this.$log.info('Copying text command was ' + msg);\n        } catch (err) {\n          this.$log.info('Unable to copy');\n        }\n\n        document.body.removeChild(textArea);\n\n      };\n\n      copyTextToClipboard.bind(this)(urlString);\n\n    } else {\n      this.$mdDialog.show(\n        this.$mdDialog.alert()\n          .clickOutsideToClose(true)\n          .title('Cannot Copy to Clipboard')\n          .textContent('Your browser doesn\\'t support copying links to your system clipboard.')\n          .ariaLabel('Cannot Copy to Clipboard')\n          .ok('Got it!')\n      );\n      this.$log.info(urlString)\n    } // end conditional for modal for browsers without clipboard copy\n  }\n\n}\n\nlinkServiceModule.service('Link', Link);\n\nexport default linkServiceModule;\n"]}