{"version":3,"sources":["common/services/link.service.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,WAAW,kBAAkB,UAAU,SAAS;EAC/D,IACK,SACA,eAAa,cAAA,iBAEd,mBAIA;;EANJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAF3B,UAAO,SAAA;OAIP,UAAU,eAAe;MAHzB,gBAAa,cAAA;;IAMhB,SAAS,YAAY;MATzB;;MAYM,eAAe,CAAC,YAAY,EAAE,SAAS,iBAAiB,QAAQ,OAAO,EAAE,KAAK,IAAI,OAAO,OAAO,EAAE,IAAI,OAAO,MAAM,MAAM,KAAK,eAAe,MAAM,IAAI,KAAK,OAAO,KAAK,WAAW,QAAQ,OAAO,iBAAiB,QAAQ,UAAU,OAAO,UAAU,aAAa,YAAY,aAAa,EAAE,IAAI,YAAY,iBAAiB,YAAY,WAAW,aAAa,IAAI,aAAa,iBAAiB,aAAa,cAAc,OAAO;;MAEva,kBAAkB,UAAU,UAAU,aAAa,EAAE,IAAI,EAAE,oBAAoB,cAAc,EAAE,MAAM,IAAI,UAAU;;MATnH,oBAAoB,QAAQ,OAAO,mBAAmB,CAC1D;;MAGI,OAAI,CAAA,YAAA;QACI,SADR,KACS,QAAQ,WAAW,MAAM;UAU9B,gBAAgB,MAXpB;;UAEF,KAAK,SAAS;UACd,KAAK,YAAY;UACjB,KAAK,OAAO;;;QAcR,aAlBF,MAAI;UAOR,eAAa;YAaH,OAbI,SAAA,cAAC,MAAM;cACnB,OAAO,KAAK,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,KAAK,KAAK;;;UAGxD,gBAAc;YAcJ,OAdI,SAAA,eAAC,OAAO,MAAM;cAehB,IAAI,QAAQ;;cAbtB,IAAI,YAAY;cAChB,MAAM,QAAQ,UAAC,MAAM,GAAM;gBACzB,IAAI,IAAI,GAAG;kBACT,aAAa;;;gBAGf,aAAS,KAAQ,MAAK,OAAO,UAAO,KAAK,OAAI,MAAO,MAAK,cAAc,KAAK;;;cAG9E,IAAI,SAAS,sBAAsB,SAAS;;gBAE1C,IAAM,sBAAsB,SAAA,oBAAU,MAAM;;kBAE1C,IAAI,WAAW,SAAS,cAAc;;;kBAGtC,SAAS,MAAM,WAAW;kBAC1B,SAAS,MAAM,MAAM;kBACrB,SAAS,MAAM,OAAO;;;;kBAItB,SAAS,MAAM,QAAQ;kBACvB,SAAS,MAAM,SAAS;;;kBAGxB,SAAS,MAAM,UAAU;;;kBAGzB,SAAS,MAAM,SAAS;kBACxB,SAAS,MAAM,UAAU;kBACzB,SAAS,MAAM,YAAY;;;kBAG3B,SAAS,MAAM,aAAa;;kBAE5B,SAAS,QAAQ;;kBAEjB,SAAS,KAAK,YAAY;;kBAE1B,SAAS;;kBAET,IAAI;oBACF,IAAM,aAAa,SAAS,YAAY;oBACxC,IAAM,MAAM,aAAa,eAAe;oBACxC,KAAK,KAAK,KAAK,8BAA8B;oBAC7C,OAAO,KAAK;oBACZ,KAAK,KAAK,KAAK;;;kBAGjB,SAAS,KAAK,YAAY;;;gBAI5B,oBAAoB,KAAK,MAAM;qBAE1B;gBACL,KAAK,UAAU,KACb,KAAK,UAAU,QACZ,oBAAoB,MACpB,MAAM,4BACN,YAAY,wEACZ,UAAU,4BACV,GAAG;gBAER,KAAK,KAAK,KAAK;;;;;;QAYb,OA1FF;;;MAoFN,kBAAkB,QAAQ,QAAQ;;MAW5B,QAAQ,WATC;;;GAYZ","file":"link.service.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport configService from 'config/config';\n\nconst linkServiceModule = angular.module('link.service.js', [\n  configService\n]);\n\nclass Link {\n  constructor (Config, $mdDialog, $log) {\n    this.Config = Config;\n    this.$mdDialog = $mdDialog;\n    this.$log = $log;\n  }\n\n  nameToUrlPath (name) {\n    return name.split('(')[0].trim().split(' ').join('_').toLowerCase();\n  }\n\n  copyLinkToClip(items, path) {\n\n    let urlString = '';\n    items.forEach((item, i) => {\n      if (i > 0) {\n        urlString += ',';\n      }\n\n      urlString += `${ this.Config.urlBase }${ path }/${  this.nameToUrlPath(item.name) }`;\n    });\n\n    if (document.queryCommandSupported('copy')) {\n\n      const copyTextToClipboard = function (text) {\n        // create a temporary textarea to give it focus and then copy to clipboard\n        let textArea = document.createElement('textarea');\n\n        // Place in top-left corner of screen regardless of scroll position.\n        textArea.style.position = 'fixed';\n        textArea.style.top = 0;\n        textArea.style.left = 0;\n\n        // Ensure it has a small width and height. Setting to 1px / 1em\n        // doesn't work as this gives a negative w/h on some browsers.\n        textArea.style.width = '2em';\n        textArea.style.height = '2em';\n\n        // We don't need padding, reducing the size if it does flash render.\n        textArea.style.padding = 0;\n\n        // Clean up any borders.\n        textArea.style.border = 'none';\n        textArea.style.outline = 'none';\n        textArea.style.boxShadow = 'none';\n\n        // Avoid flash of white box if rendered for any reason.\n        textArea.style.background = 'transparent';\n\n        textArea.value = text;\n\n        document.body.appendChild(textArea);\n\n        textArea.select();\n\n        try {\n          const successful = document.execCommand('copy');\n          const msg = successful ? 'successful' : 'unsuccessful';\n          this.$log.info('Copying text command was ' + msg);\n        } catch (err) {\n          this.$log.info('Unable to copy');\n        }\n\n        document.body.removeChild(textArea);\n\n      };\n\n      copyTextToClipboard.bind(this)(urlString);\n\n    } else {\n      this.$mdDialog.show(\n        this.$mdDialog.alert()\n          .clickOutsideToClose(true)\n          .title('Cannot Copy to Clipboard')\n          .textContent('Your browser doesn\\'t support copying links to your system clipboard.')\n          .ariaLabel('Cannot Copy to Clipboard')\n          .ok('Got it!')\n      );\n      this.$log.info(urlString)\n    } // end conditional for modal for browsers without clipboard copy\n  }\n\n}\n\nlinkServiceModule.service('Link', Link);\n\nexport default linkServiceModule;\n"]}