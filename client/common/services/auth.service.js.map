{"version":3,"sources":["common/services/auth.service.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,WAAW,qBAAqB,gCAAgC,kBAAkB,UAAU,SAAS;EACpH,IACK,SAEA,aACA,eAED;EALJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAD3B,UAAO,SAAA;OAGP,UAAU,kBAAkB,IAAI,UAAU,4BAA4B;MADtE,cAAW,2BAAA;OAGX,UAAU,eAAe;MAFzB,gBAAa,cAAA;;IAKhB,SAAS,YAAY;MAVzB;;MAOM,oBAAoB,QAAQ,OAAO,mBAAmB,CAC1D,aACA,YAAY,MACZ,cAAc;;MAGhB,kBAAkB,QAAQ,8FAAQ,UAAU,QAAQ,UAAU,YAAY,OAAO,MAAM,QAAQ,cAAc,IAAI;QAC7G,IAAI,cAAc;QAClB,IAAI,0BAA2B;QAC/B,IAAI,YAAa;;QAEjB,IAAI,aAAa,IAAI,UAAU;;UAE3B,KAAK,IAAK,UAAU,MAAM;;YAExB,cAAc;YACd,0BAA2B;;;;YAI3B,IAAK,OAAO,QAAQ,SAAS,SAAU;cACrC,OAAO,GAAG,UAAU,QAAQ,WAAW,IAAI,EAAE,QAAQ;;aAEtD,YAAY;;YAEb,0BAA2B;YAC3B,aAAa,OAAO;YACpB,cAAc;YACd,OAAO,GAAG,SAAS,IAAI,EAAE,QAAQ;;eAGhC;UACL,0BAA0B;;;QAG5B,OAAO;;;;;;;;;UASL,OAAM,SAAA,MAAC,MAAM,UAAU;YAEjB,IAAI,QAAQ;;YADhB,IAAI,KAAK,YAAY,QAAQ;YAC7B,IAAI,WAAW,GAAG;;YAElB,MAAM,KAAM,OAAO,UAAU,mBAAmB;cAC9C,UAAU,KAAK;cACf,UAAU,KAAK;eAEhB,QAAQ,UAAC,MAAS;cACjB,aAAa,IAAI,SAAS,KAAK;cAC/B,KAAK,IAAK,UAAC,MAAS;gBAClB,cAAc;gBACd,SAAS,QAAQ;gBACjB,OAAO;iBACN,UAAC,KAAQ;gBACV,SAAS,OAAO;gBAChB,OAAO,GAAG;;eAGb,MAAM,UAAC,KAAQ;cACd,MAAK;cACL,SAAS,OAAO;cAChB,OAAO,GAAG;;;YAGZ,OAAO,SAAS;;;;;;;;UAQlB,QAAO,SAAA,SAAG;YACR,aAAa,OAAO;YACpB,cAAc;;;;;;;;;;UAUhB,YAAW,SAAA,WAAC,MAAM,UAAU;YAEtB,IAAI,QAAQ;;YADhB,IAAI,KAAK,YAAY,QAAQ;;;YAG7B,KAAK,eAAe;;YAEpB,OAAO,KAAK,KAAK,MACf,UAAC,MAAS;cACR,IAAK,YAAY,eAAe,WAAW,YAAY,SAAS,SAAU;gBACxE,OAAO,GAAG;;cAEZ,aAAa,IAAI,SAAS,KAAK;cAC/B,cAAc,KAAK;cACnB,OAAO,GAAG;eAEZ,UAAC,KAAQ;cACP,MAAK;cACL,OAAO,GAAG;eACT;;;;;;;;;;;UAWP,gBAAe,SAAA,eAAC,aAAa,aAAa,UAAU;YAClD,IAAI,KAAK,YAAY,QAAQ;;YAE7B,OAAO,KAAK,eAAe,EAAE,IAAI,YAAY,OAAO;cAClD,aAAa;cACb,aAAa;eACZ,UAAS,MAAM;cAChB,OAAO,GAAG;eACT,UAAS,KAAK;cACf,OAAO,GAAG;eACT;;;;;;;;UAQL,gBAAe,SAAA,iBAAG;YAChB,OAAO;;;;;;;;UAQT,iBAAgB,SAAA,gBAAC,MAAM,KAAK;YAC1B,IAAK,YAAY,eAAe,OAAQ;cACtC,YAAY,QAAQ;;YAEtB,OAAO;;;;;;;;UAQT,yBAAuB,CAAA,UAAA,0BAAA;YAEjB,IAAI,kCAAkC,SAAS,0BAA0B;cACvE,OAAO,yBAAyB,MAAM,MAAM;;;YAG9C,gCAAgC,WAAW,YAAY;cACrD,OAAO,yBAAyB;;;YAGlC,OAAO;aAVW,YAAG;YACzB,OAAO;;;;;;;;UAQT,YAAW,SAAA,aAAG;YACZ,OAAO,YAAY,eAAe;;;;;;UAMpC,iBAAgB,SAAA,gBAAC,IAAI;YACnB,IAAG,YAAY,eAAe,aAAa;cACzC,YAAY,SAAS,KAAK,YAAW;gBACnC,GAAG;iBACH,SAAO,YAAW;gBAClB,GAAG;;mBAEA,IAAG,YAAY,eAAe,SAAS;cAC5C,GAAG;mBACE;cACL,GAAG;;;;;;;;;UASP,cAAa,SAAA,aAAC,OAAO;YACnB,IAAK,MAAM,SAAS,WAAW,MAAM,SAAS,UAAW;cACvD,YAAY;;YAEd,OAAO;;;;;;;;UAQT,cAAa,SAAA,eAAG;YACd,OAAO;;;;;;;;UAQT,SAAQ,SAAA,UAAG;YACT,OAAO,YAAY,SAAS;;;;;;;;UAQ9B,UAAS,SAAA,WAAG;YACV,OAAO,CACL;cACE,KAAK;cACL,MAAM;eAER;cACE,KAAK;cACL,MAAM;;;;;;;UAQZ,UAAS,SAAA,WAAG;YACV,OAAO,aAAa,IAAI;;;;;MAa1B,QAAQ,WARC;;;GAWZ","file":"auth.service.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport 'angular-ui-router';\nimport userService from 'common/services/user.service';\nimport configService from 'config/config';\n\nconst authServiceModule = angular.module('auth.service.js', [\n  'ui.router',\n  userService.name,\n  configService.name\n]);\n\nauthServiceModule.factory('Auth', function ($state, $timeout, $rootScope, $http, User, Config, $cookieStore, $q) {\n    var currentUser = {};\n    var isWaitingForInitialAuth =  true;\n    var nextRoute =  false;\n\n    if ($cookieStore.get('token')) {\n\n        User.get( function (data) {\n          // update currentUser, toggle waiting for Auth bool, route\n          currentUser = data;\n          isWaitingForInitialAuth =  false;\n          // if the user API response was slow and the UI has pushed the user\n          // to /login while waiting for a response, forward them to their\n          // intended route\n          if ( $state.current.name === 'login' ) {\n            $state.go(nextRoute.name || 'content', {}, { reload: true });\n          }\n        }, function () {\n          // error, so we remove the token and redirect to login\n          isWaitingForInitialAuth =  false;\n          $cookieStore.remove('token');\n          currentUser = {};\n          $state.go('login', {}, { reload: true });\n        });\n\n    } else {\n      isWaitingForInitialAuth = false;\n    }\n\n    return {\n\n      /**\n       * Authenticate user and save token\n       *\n       * @param  {Object}   user     - login info\n       * @param  {Function} callback - optional\n       * @return {Promise}\n       */\n      login (user, callback) {\n        var cb = callback || angular.noop;\n        var deferred = $q.defer();\n\n        $http.post( Config.urlBase + '/api/auth/local', {\n          username: user.username,\n          password: user.password\n        })\n        .success((data) => {\n          $cookieStore.put('token', data.token);\n          User.get( (data) => {\n            currentUser = data;\n            deferred.resolve(data);\n            return cb();\n          }, (err) => {\n            deferred.reject(err);\n            return cb(err);\n          });\n        })\n        .error((err) => {\n          this.logout();\n          deferred.reject(err);\n          return cb(err);\n        });\n\n        return deferred.promise;\n      },\n\n      /**\n       * Delete access token and user info\n       *\n       * @param  {Function}\n       */\n      logout () {\n        $cookieStore.remove('token');\n        currentUser = {};\n      },\n\n      /**\n       * Create a new user\n       *\n       * @param  {Object}   user     - user info\n       * @param  {Function} callback - optional\n       * @return {Promise}\n       */\n      createUser (user, callback) {\n        var cb = callback || angular.noop;\n\n        // @FIXME when organizations are ready\n        user.organization = 'scala';\n\n        return User.save(user,\n          (data) => {\n            if ( currentUser.hasOwnProperty('role') && currentUser.role === 'admin' ) {\n              return cb(currentUser);\n            }\n            $cookieStore.put('token', data.token);\n            currentUser = User.get();\n            return cb(user);\n          },\n          (err) => {\n            this.logout();\n            return cb(err);\n          }).$promise;\n      },\n\n      /**\n       * Change password\n       *\n       * @param  {String}   oldPassword\n       * @param  {String}   newPassword\n       * @param  {Function} callback    - optional\n       * @return {Promise}\n       */\n      changePassword (oldPassword, newPassword, callback) {\n        var cb = callback || angular.noop;\n\n        return User.changePassword({ id: currentUser._id }, {\n          oldPassword: oldPassword,\n          newPassword: newPassword\n        }, function(user) {\n          return cb(user);\n        }, function(err) {\n          return cb(err);\n        }).$promise;\n      },\n\n      /**\n       * Gets all available info on authenticated user\n       *\n       * @return {Object} user\n       */\n      getCurrentUser () {\n        return currentUser;\n      },\n\n      /**\n       * Sets a property on the currentUser object\n       *\n       * @return {String} prop\n       */\n      setUserProperty (prop, val) {\n        if ( currentUser.hasOwnProperty(prop) ) {\n          currentUser[prop] = val;\n        }\n        return currentUser;\n      },\n\n      /**\n       * Check if waiting for the initial Auth check\n       *\n       * @return {Boolean}\n       */\n      isWaitingForInitialAuth () {\n        return isWaitingForInitialAuth;\n      },\n\n      /**\n       * Check if a user is logged in\n       *\n       * @return {Boolean}\n       */\n      isLoggedIn () {\n        return currentUser.hasOwnProperty('role');\n      },\n\n      /**\n       * Waits for currentUser to resolve before checking if user is logged in\n       */\n      isLoggedInAsync (cb) {\n        if(currentUser.hasOwnProperty('$promise')) {\n          currentUser.$promise.then(function() {\n            cb(true);\n          }).catch(function() {\n            cb(false);\n          });\n        } else if(currentUser.hasOwnProperty('role')) {\n          cb(true);\n        } else {\n          cb(false);\n        }\n      },\n\n      /**\n       * Save the next route user is attempting to navigate to\n       *\n       * @return {Object}\n       */\n      setNextRoute (route) {\n        if ( route.name !== 'login' && route.name !== 'logout' ) {\n          nextRoute = route;\n        }\n        return nextRoute;\n      },\n\n      /**\n       * Save the next route user is attempting to navigate to\n       *\n       * @return {Object}\n       */\n      getNextRoute () {\n        return nextRoute;\n      },\n\n      /**\n       * Check if a user is an admin\n       *\n       * @return {Boolean}\n       */\n      isAdmin () {\n        return currentUser.role === 'admin';\n      },\n\n      /**\n       * Get a list of user roles\n       *\n       * @return {Array}\n       */\n      getRoles () {\n        return [\n          {\n            val: 'user',\n            name: 'User'\n          },\n          {\n            val: 'admin',\n            name: 'Admin'\n          }\n        ];\n      },\n\n      /**\n       * Get auth token\n       */\n      getToken () {\n        return $cookieStore.get('token');\n      }\n    };\n  });\n\nexport default authServiceModule;\n"]}