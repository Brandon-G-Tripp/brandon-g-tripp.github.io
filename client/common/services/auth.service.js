"use strict";System.register(["angular","angular-ui-router","common/services/user.service","config/config"],function(_export,_context){var angular,userService,configService,authServiceModule;return{setters:[function(_angular){angular=_angular["default"]},function(_angularUiRouter){},function(_commonServicesUserService){userService=_commonServicesUserService["default"]},function(_configConfig){configService=_configConfig["default"]}],execute:function(){authServiceModule=angular.module("auth.service.js",["ui.router",userService.name,configService.name]),authServiceModule.factory("Auth",["$state","$timeout","$rootScope","$http","User","Config","$cookieStore","$q",function($state,$timeout,$rootScope,$http,User,Config,$cookieStore,$q){var currentUser={},_isWaitingForInitialAuth=!0,nextRoute=!1;return $cookieStore.get("token")?User.get(function(data){currentUser=data,_isWaitingForInitialAuth=!1,"login"===$state.current.name&&$state.go(nextRoute.name||"content",{},{reload:!0})},function(){_isWaitingForInitialAuth=!1,$cookieStore.remove("token"),currentUser={},$state.go("login",{},{reload:!0})}):_isWaitingForInitialAuth=!1,{login:function(user,callback){var _this=this,cb=callback||angular.noop,deferred=$q.defer();return $http.post(Config.urlBase+"/api/auth/local",{username:user.username,password:user.password}).success(function(data){$cookieStore.put("token",data.token),User.get(function(data){return currentUser=data,deferred.resolve(data),cb()},function(err){return deferred.reject(err),cb(err)})}).error(function(err){return _this.logout(),deferred.reject(err),cb(err)}),deferred.promise},logout:function(){$cookieStore.remove("token"),currentUser={}},createUser:function(user,callback){var _this2=this,cb=callback||angular.noop;return user.organization="scala",User.save(user,function(data){return currentUser.hasOwnProperty("role")&&"admin"===currentUser.role?cb(currentUser):($cookieStore.put("token",data.token),currentUser=User.get(),cb(user))},function(err){return _this2.logout(),cb(err)}).$promise},changePassword:function(oldPassword,newPassword,callback){var cb=callback||angular.noop;return User.changePassword({id:currentUser._id},{oldPassword:oldPassword,newPassword:newPassword},function(user){return cb(user)},function(err){return cb(err)}).$promise},getCurrentUser:function(){return currentUser},setUserProperty:function(prop,val){return currentUser.hasOwnProperty(prop)&&(currentUser[prop]=val),currentUser},isWaitingForInitialAuth:function(){return _isWaitingForInitialAuth},isLoggedIn:function(){return currentUser.hasOwnProperty("role")},isLoggedInAsync:function(cb){currentUser.hasOwnProperty("$promise")?currentUser.$promise.then(function(){cb(!0)})["catch"](function(){cb(!1)}):cb(currentUser.hasOwnProperty("role")?!0:!1)},setNextRoute:function(route){return"login"!==route.name&&"logout"!==route.name&&(nextRoute=route),nextRoute},getNextRoute:function(){return nextRoute},isAdmin:function(){return"admin"===currentUser.role},getRoles:function(){return[{val:"user",name:"User"},{val:"admin",name:"Admin"}]},getToken:function(){return $cookieStore.get("token")}}}]),_export("default",authServiceModule)}}});