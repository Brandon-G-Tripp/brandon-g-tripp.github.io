{"version":3,"sources":["common/services/authInterceptor.service.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,YAAY,UAAU,SAAS;EAC9C,IADK,SAED;EAAJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;;IAMV,SAAS,YAAY;MACnB;;MALA,wBAAwB,QAAQ,OAAO,8BAA8B;;MAE3E,sBAAsB,QAAQ,wDAAmB,UAAU,YAAY,IAAI,cAAc;QACvF,OAAO;;UAEL,SAAO,SAAA,QAAC,QAAQ;YACd,OAAO,UAAU,OAAO,WAAW;YACnC,IAAI,aAAa,IAAI,UAAU;cAC7B,OAAO,QAAQ,gBAAgB,YAAY,aAAa,IAAI;;YAE9D,OAAO;;;;UAIT,eAAc,SAAA,cAAC,UAAU;YACvB,IAAG,SAAS,WAAW,KAAK;;cAE1B,aAAa,OAAO;cACpB,OAAO,GAAG,OAAO;mBAEd;cACH,OAAO,GAAG,OAAO;;;;;;MAMzB,sBAAsB,yBAAO,UAAC,eAAkB;QAC9C,cAAc,aAAa,KAAK;;;MAS5B,QAAQ,WANC;;;GASZ","file":"authInterceptor.service.js","sourcesContent":["import angular from 'angular';\n\nconst authInterceptorModule = angular.module('authInterceptor.service.js', []);\n\nauthInterceptorModule.factory('authInterceptor', function ($rootScope, $q, $cookieStore) {\n  return {\n    // Add authorization token to headers\n    request(config) {\n      config.headers = config.headers || {};\n      if ($cookieStore.get('token')) {\n        config.headers.Authorization = 'Bearer ' + $cookieStore.get('token');\n      }\n      return config;\n    },\n\n    // Intercept 401s and redirect you to login\n    responseError (response) {\n      if(response.status === 401) {\n        // remove any stale tokens\n        $cookieStore.remove('token');\n        return $q.reject(response);\n      }\n      else {\n        return $q.reject(response);\n      }\n    }\n  };\n});\n\nauthInterceptorModule.config(($httpProvider) => {\n  $httpProvider.interceptors.push('authInterceptor');\n});\n\nexport default authInterceptorModule;\n"]}