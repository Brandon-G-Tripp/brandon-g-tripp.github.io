{"version":3,"sources":["common/services/authBroadcast.service.js"],"names":["angular","authBroadcastModule","module","constant","loginSuccess","loginFailed","sessionTimeout","serverError","factory","$rootScope","$q","AUTH_EVENTS","response","res","_","isEmpty","data","token","status","$broadcast","responseError","code","reject","config","$httpProvider","interceptors","push"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,YAAY,UAAU,SAAS,UAAU;EACxD;;EAEA,IAAI,SAAS;EACb,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAP3BA,UAQS,SAAS;;IAErB,SAAS,YAAY;MARnBC,sBAAsBD,QAAQE,OAAO,4BAA4B;;MAGvED,oBAAoBE,SAAS,eAAe;QAC1CC,cAAc;QACdC,aAAa;QACbC,gBAAgB;;;QAGhBC,aAAa;;MAGfN,oBAAoBO,QAAQ,qDAAiB,UAAUC,YAAYC,IAAIC,aAAa;QAClF,OAAO;UACLC,UADK,SAAA,SACKC,KAAK;YACb,IAAK,CAACC,EAAEC,QAAQF,IAAIG,KAAKC,UAAUJ,IAAIK,WAAW,KAAM;cACtDT,WAAWU,WAAW;gBACpB,KAAKR,YAAYP;gBACjBS,IAAIK,SAASL;;;YAGjB,OAAOA;;UAETO,eAVK,SAAA,cAUUP,KAAK;;;YAGlB,IAAKA,IAAIK,UAAUL,IAAIG,KAAKK,MAAO;cACjCZ,WAAWU,WAAW;gBACpB,yBAAyBR,YAAYN;gBACrC,0BAA0BM,YAAYL;gBACtCO,IAAIG,KAAKK,OAAOR;mBACb,IAAKA,IAAIK,WAAW,KAAM;cAC/BT,WAAWU,WAAWR,YAAYJ,aAAaM;;;YAGjD,OAAOH,GAAGY,OAAOT;;;;MAKvBZ,oBAAoBsB,yBAAO,UAACC,eAAkB;QAC5CA,cAAcC,aAAaC,KAAK;;;MAS5B,QAAQ,WANCzB;;;GASZ","file":"authBroadcast.service.js","sourcesContent":["import angular from 'angular';\n\nconst authBroadcastModule = angular.module('authBroadcast.service.js', []);\n\n// auth events that we catch and use to broadcast user access control\nauthBroadcastModule.constant('AUTH_EVENTS', {\n  loginSuccess: 'login.success',\n  loginFailed: 'login.failed',\n  sessionTimeout: 'auth.session.timeout',\n  // notAuthenticated: 'auth.notauthenticated',\n  // notAuthorized: 'auth.notauthorized',\n  serverError: 'auth.serverError'\n});\n\nauthBroadcastModule.factory('authBroadcast', function ($rootScope, $q, AUTH_EVENTS) {\n  return {\n    response (res) {\n      if ( !_.isEmpty(res.data.token) && res.status === 200 ) {\n        $rootScope.$broadcast({\n          200: AUTH_EVENTS.loginSuccess\n        }[res.status], res);\n      }\n\n      return res;\n    },\n    responseError (res) {\n      // if the response has a status code and a res.data.code key, then it might\n      // be one of the following array we want to broadcast\n      if ( res.status && res.data.code ) {\n        $rootScope.$broadcast({\n          'authentication.failed': AUTH_EVENTS.loginFailed,\n          'authentication.invalid': AUTH_EVENTS.sessionTimeout,\n        }[res.data.code], res);\n      } else if ( res.status === 500 ) {\n        $rootScope.$broadcast(AUTH_EVENTS.serverError, res);\n      }\n\n      return $q.reject(res);\n    }\n  };\n});\n\nauthBroadcastModule.config(($httpProvider) => {\n  $httpProvider.interceptors.push('authBroadcast');\n});\n\nexport default authBroadcastModule;\n"]}