{"version":3,"sources":["common/services/authBroadcast.service.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,YAAY,UAAU,SAAS;EAC9C,IADK,SAED;EAAJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;;IAMV,SAAS,YAAY;MACnB;;MALA,sBAAsB,QAAQ,OAAO,4BAA4B;;;MAGvE,oBAAoB,SAAS,eAAe;QAC1C,cAAc;QACd,aAAa;QACb,gBAAgB;;;QAGhB,aAAa;;;MAGf,oBAAoB,QAAQ,qDAAiB,UAAU,YAAY,IAAI,aAAa;QAClF,OAAO;UACL,UAAS,SAAA,SAAC,KAAK;YACb,IAAK,CAAC,EAAE,QAAQ,IAAI,KAAK,UAAU,IAAI,WAAW,KAAM;cACtD,WAAW,WAAW,CAAA;gBACpB,KAAK,YAAY;iBACjB,IAAI,SAAS;;;YAGjB,OAAO;;UAET,eAAc,SAAA,cAAC,KAAK;;;YAGlB,IAAK,IAAI,UAAU,IAAI,KAAK,MAAO;cACjC,WAAW,WAAW,CAAA;gBACpB,yBAAyB,YAAY;gBACrC,0BAA0B,YAAY,kBACtC,IAAI,KAAK,OAAO;mBACb,IAAK,IAAI,WAAW,KAAM;cAC/B,WAAW,WAAW,YAAY,aAAa;;;YAGjD,OAAO,GAAG,OAAO;;;;;MAKvB,oBAAoB,yBAAO,UAAC,eAAkB;QAC5C,cAAc,aAAa,KAAK;;;MAS5B,QAAQ,WANC;;;GASZ","file":"authBroadcast.service.js","sourcesContent":["import angular from 'angular';\n\nconst authBroadcastModule = angular.module('authBroadcast.service.js', []);\n\n// auth events that we catch and use to broadcast user access control\nauthBroadcastModule.constant('AUTH_EVENTS', {\n  loginSuccess: 'login.success',\n  loginFailed: 'login.failed',\n  sessionTimeout: 'auth.session.timeout',\n  // notAuthenticated: 'auth.notauthenticated',\n  // notAuthorized: 'auth.notauthorized',\n  serverError: 'auth.serverError'\n});\n\nauthBroadcastModule.factory('authBroadcast', function ($rootScope, $q, AUTH_EVENTS) {\n  return {\n    response (res) {\n      if ( !_.isEmpty(res.data.token) && res.status === 200 ) {\n        $rootScope.$broadcast({\n          200: AUTH_EVENTS.loginSuccess\n        }[res.status], res);\n      }\n\n      return res;\n    },\n    responseError (res) {\n      // if the response has a status code and a res.data.code key, then it might\n      // be one of the following array we want to broadcast\n      if ( res.status && res.data.code ) {\n        $rootScope.$broadcast({\n          'authentication.failed': AUTH_EVENTS.loginFailed,\n          'authentication.invalid': AUTH_EVENTS.sessionTimeout,\n        }[res.data.code], res);\n      } else if ( res.status === 500 ) {\n        $rootScope.$broadcast(AUTH_EVENTS.serverError, res);\n      }\n\n      return $q.reject(res);\n    }\n  };\n});\n\nauthBroadcastModule.config(($httpProvider) => {\n  $httpProvider.interceptors.push('authBroadcast');\n});\n\nexport default authBroadcastModule;\n"]}