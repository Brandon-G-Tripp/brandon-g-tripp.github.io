{"version":3,"sources":["common/directives/customPasswordValidation/customPasswordValidation.spec.js"],"names":["angular","customPasswordValidation","chai","chaiJq","use","expect","describe","element","compiled","scope","beforeEach","mock","module","name","inject","$rootScope","$compile","$new","elementTemplate","$digest","checkValid","password","it","to","have","$class","checkInvalid"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,WAAW,iBAAiB,8BAA8B,QAAQ,YAAY,UAAU,SAAS,UAAU;EAC1H;;EAEA,IAAI,SAAS,0BAA0B,MAAM,QAAQ;EACrD,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAP3BA,UAQS,SAAS;OAClB,UAAU,eAAe,IAAI,UAAU,2BAA2B;MAPlEC,2BAQ0B,0BAA0B;OACpD,UAAU,OAAO;MARjBC,OASM,MAAM;OACZ,UAAU,SAAS;MATnBC,SAUQ,QAAQ;;IAEnB,SAAS,YAAY;MAVzBD,KAAKE,IAAID;MACHE,SAASH,KAAKG;MAEpBC,SAAS,uCAAuC,YAAM;QACpD,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QAEJC,WAAWV,QAAQW,KAAKC,OAAOX,yBAAyBY;QAExDH,WAAWI,OAAO,UAACC,YAAYC,UAAa;UAC1CP,QAAQM,WAAWE;UAEnB,IAAMC,kBAAkB;UACxBX,UAAUP,QAAQO,QAAQW;UAE1BV,WAAWQ,SAAST,SAASE;UAC7BA,MAAMU;;;QAGR,IAAMC,aAAa,SAAbA,WAAcC,UAAa;UAC/BC,GAAE,gBAAA,OAAkBD,WAAa,YAAM;YACrCZ,MAAMY,WAAWA;YACjBZ,MAAMU;YACNd,OAAOE,SAASgB,GAAGC,KAAKC,OAAO;;;;QAInC,IAAMC,eAAe,SAAfA,aAAgBL,UAAa;UACjCC,GAAE,kBAAA,OAAoBD,WAAa,YAAM;YACvCZ,MAAMY,WAAWA;YACjBZ,MAAMU;YACNd,OAAOE,SAASgB,GAAGC,KAAKC,OAAO;;;;QAInCL,WAAW;QAEXM,aAAa;QACbA,aAAa;QACbA,aAAa;QACbA,aAAa;;;;GASZ","file":"customPasswordValidation.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport customPasswordValidation from './customPasswordValidation';\nimport chai from 'chai';\nimport chaiJq from 'chai-jq';\n\nchai.use(chaiJq);\nconst expect = chai.expect;\n\ndescribe('directive: customPasswordValidation', () => {\n  let element;\n  let compiled;\n  let scope;\n\n  beforeEach(angular.mock.module(customPasswordValidation.name));\n\n  beforeEach(inject(($rootScope, $compile) => {\n    scope = $rootScope.$new();\n\n    const elementTemplate = '<input type=\"password\" custom-password-validation required name=\"testSignup\" ng-model=\"password\">';\n    element = angular.element(elementTemplate);\n\n    compiled = $compile(element)(scope);\n    scope.$digest();\n  }));\n\n  const checkValid = (password) => {\n    it(`is valid for ${ password }`, () => {\n      scope.password = password;\n      scope.$digest();\n      expect(element).to.have.$class('ng-valid');\n    });\n  };\n\n  const checkInvalid = (password) => {\n    it(`is invalid for ${ password }`, () => {\n      scope.password = password;\n      scope.$digest();\n      expect(element).to.have.$class('ng-invalid');\n    });\n  };\n\n  checkValid('FooBarBaz1');\n\n  checkInvalid('FooBar1');\n  checkInvalid('FooBarBaz');\n  checkInvalid('foobarbaz1');\n  checkInvalid('FOOBARBAZ1');\n\n});\n"]}