{"version":3,"sources":["common/directives/customPasswordValidation/customPasswordValidation.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,CAAC,YAAY,UAAU,SAAS;EAC9C,IADK,SAED;EAAJ,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAH3B,UAAO,SAAA;;IAMV,SAAS,YAAY;MACnB;;MALA,oCAAoC,QAAQ,OAAO,+BAA+B;;MAExF,kCAAkC,UAAU,4BAA4B,YAAW;QACjF,IAAM,uBAAuB;QAC7B,IAAM,uBAAuB;QAC7B,IAAM,qBAAqB;;;QAG3B,OAAO;UACL,SAAS;UACT,UAAU;UACV,MAAM,SAAA,KAAS,OAAO,KAAK,OAAO,MAAM;;YAEtC,KAAK,YAAY,gBAAgB,UAAS,YAAY;cACpD,OAAO,qBAAqB,KAAK;;YAEnC,KAAK,YAAY,gBAAgB,UAAS,YAAY;cACpD,OAAO,qBAAqB,KAAK;;YAEnC,KAAK,YAAY,cAAc,UAAS,YAAY;cAClD,OAAO,mBAAmB,KAAK;;;;;;;;;MAgBjC,QAAQ,WAPC;;;GAUZ","file":"customPasswordValidation.js","sourcesContent":["import angular from 'angular';\n\nconst customPasswordValidationDirective = angular.module('customPasswordValidation.js', []);\n\ncustomPasswordValidationDirective.directive('customPasswordValidation', function() {\n  const UPPERCASE_CHAR_REGEX = /^(?=.*[A-Z])[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n  const LOWERCASE_CHAR_REGEX = /^(?=.*[a-z])[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n  const INTEGER_CHAR_REGEX = /^(?=.*\\d)[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n  // const SPECIAL_CHAR_REGEX = /^(?=.*(~|`|!|\\@|\\#|\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\+|\\=|\\-|\\{|\\}|'|:|;|\\?|\\/|\\.|,|>|<))[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n\n  return {\n    require: 'ngModel',\n    restrict: '',\n    link: function(scope, elm, attrs, ctrl) {\n      // only apply the validator if ngModel is present and Angular has added the password validator\n      ctrl.$validators.uppercaseChar = function(modelValue) {\n        return UPPERCASE_CHAR_REGEX.test(modelValue);\n      };\n      ctrl.$validators.lowercaseChar = function(modelValue) {\n        return LOWERCASE_CHAR_REGEX.test(modelValue);\n      };\n      ctrl.$validators.integerChar = function(modelValue) {\n        return INTEGER_CHAR_REGEX.test(modelValue);\n      };\n      // ctrl.$validators.specialChar = function(modelValue) {\n      //   return SPECIAL_CHAR_REGEX.test(modelValue);\n      // };\n    }\n  };\n});\n\nexport default customPasswordValidationDirective;\n"]}