{"version":3,"sources":["common/directives/customPasswordValidation/customPasswordValidation.js"],"names":["angular","customPasswordValidationDirective","module","directive","UPPERCASE_CHAR_REGEX","LOWERCASE_CHAR_REGEX","INTEGER_CHAR_REGEX","require","restrict","link","scope","elm","attrs","ctrl","$validators","uppercaseChar","modelValue","test","lowercaseChar","integerChar"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,YAAY,UAAU,SAAS,UAAU;EACxD;;EAEA,IAAI,SAAS;EACb,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAP3BA,UAQS,SAAS;;IAErB,SAAS,YAAY;MARnBC,oCAAoCD,QAAQE,OAAO,+BAA+B;MAExFD,kCAAkCE,UAAU,4BAA4B,YAAW;QACjF,IAAMC,uBAAuB;QAC7B,IAAMC,uBAAuB;QAC7B,IAAMC,qBAAqB;;QAG3B,OAAO;UACLC,SAAS;UACTC,UAAU;UACVC,MAAM,SAAA,KAASC,OAAOC,KAAKC,OAAOC,MAAM;;YAEtCA,KAAKC,YAAYC,gBAAgB,UAASC,YAAY;cACpD,OAAOZ,qBAAqBa,KAAKD;;;YAEnCH,KAAKC,YAAYI,gBAAgB,UAASF,YAAY;cACpD,OAAOX,qBAAqBY,KAAKD;;;YAEnCH,KAAKC,YAAYK,cAAc,UAASH,YAAY;cAClD,OAAOV,mBAAmBW,KAAKD;;;;;;;;;MAkBjC,QAAQ,WATCf;;;GAYZ","file":"customPasswordValidation.js","sourcesContent":["import angular from 'angular';\n\nconst customPasswordValidationDirective = angular.module('customPasswordValidation.js', []);\n\ncustomPasswordValidationDirective.directive('customPasswordValidation', function() {\n  const UPPERCASE_CHAR_REGEX = /^(?=.*[A-Z])[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n  const LOWERCASE_CHAR_REGEX = /^(?=.*[a-z])[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n  const INTEGER_CHAR_REGEX = /^(?=.*\\d)[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n  // const SPECIAL_CHAR_REGEX = /^(?=.*(~|`|!|\\@|\\#|\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\+|\\=|\\-|\\{|\\}|'|:|;|\\?|\\/|\\.|,|>|<))[0-9a-zA-Z~`!@#$%^&*()_+=-{}\\[\\]|\\\\\"':;?/.,><]{8,}$/;\n\n  return {\n    require: 'ngModel',\n    restrict: '',\n    link: function(scope, elm, attrs, ctrl) {\n      // only apply the validator if ngModel is present and Angular has added the password validator\n      ctrl.$validators.uppercaseChar = function(modelValue) {\n        return UPPERCASE_CHAR_REGEX.test(modelValue);\n      };\n      ctrl.$validators.lowercaseChar = function(modelValue) {\n        return LOWERCASE_CHAR_REGEX.test(modelValue);\n      };\n      ctrl.$validators.integerChar = function(modelValue) {\n        return INTEGER_CHAR_REGEX.test(modelValue);\n      };\n      // ctrl.$validators.specialChar = function(modelValue) {\n      //   return SPECIAL_CHAR_REGEX.test(modelValue);\n      // };\n    }\n  };\n});\n\nexport default customPasswordValidationDirective;\n"]}