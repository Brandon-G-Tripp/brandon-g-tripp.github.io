{"version":3,"sources":["common/directives/loginComponent/loginComponent.controller.spec.js"],"names":["angular","chai","sinon","sinonChai","loginComponentController","use","expect","describe","$rootScope","controller","$state","$animate","Auth","beforeEach","mock","module","name","inject","$controller","_$rootScope_","go","stub","login","returns","Promise","resolve","loginForm","$valid","$submitted","user","email","password","it","not","to","have","been","called","args","deep","equal","username","done","loginUserPromise","then","calledWith","reload","catch","err","code","message","reject","errors","data","be","false"],"mappings":"AAAA;;AAEA,OAAO,SAAS,CAAC,WAAW,iBAAiB,QAAQ,SAAS,cAAc,gCAAgC,UAAU,SAAS,UAAU;EACvI;;EAEA,IAAI,SAAS,MAAM,OAAO,WAAW,0BAA0B;EAC/D,OAAO;IACL,SAAS,CAAC,UAAU,UAAU;MAP3BA,UAQS,SAAS;OAClB,UAAU,eAAe,IAAI,UAAU,OAAO;MAP9CC,OAQM,MAAM;OACZ,UAAU,QAAQ;MARlBC,QASO,OAAO;OACd,UAAU,YAAY;MATtBC,YAUW,WAAW;OACtB,UAAU,2BAA2B;MATrCC,2BAU0B,0BAA0B;;IAEvD,SAAS,YAAY;MAVzBH,KAAKI,IAAIF;MACHG,SAASL,KAAKK;MAEpBC,SAAS,kCAAkC,YAAM;QAC/C,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QAEJC,WAAWb,QAAQc,KAAKC,OAAOX,yBAAyBY;QAExDH,WAAWI,OAAO,UAACC,aAAaC,cAAiB;UAC/CX,aAAaW;UACbT,SAAS;YACPU,IAAIlB,MAAMmB;;UAEZV,WAAW;UACXC,OAAO;YACLU,OAAOpB,MAAMmB,OAAOE,QAAQC,QAAQC;;UAGtChB,aAAaS,YAAY,sBAAsB;YAAER,QAAAA;YAAQC,UAAAA;YAAUC,MAAAA;;;QAGrEL,SAAS,gBAAgB,YAAM;UAC7BM,WAAW,YAAM;YACfJ,WAAWiB,UAAUC,SAAS;YAC9BlB,WAAWiB,UAAUE,aAAa;YAClCnB,WAAWoB,OAAO;cAChBC,OAAO;cACPC,UAAU;;;UAIdC,GAAG,2CAA2C,YAAM;YAClDvB,WAAWiB,UAAUC,SAAS;YAC9BlB,WAAWa;YACXhB,OAAOM,KAAKU,OAAOW,IAAIC,GAAGC,KAAKC,KAAKC;;UAGtCL,GAAG,yDAAyD,YAAM;YAChEvB,WAAWiB,UAAUE,aAAa;YAClCnB,WAAWa;YACXhB,OAAOM,KAAKU,OAAOW,IAAIC,GAAGC,KAAKC,KAAKC;;UAGtCL,GAAG,qCAAqC,YAAM;YAC5CvB,WAAWa;YACXhB,OAAOM,KAAKU,MAAMgB,KAAK,GAAG,IAAIJ,GAAGK,KAAKC,MAAM;cAC1CC,UAAUhC,WAAWoB,KAAKC;cAC1BC,UAAUtB,WAAWoB,KAAKE;;;UAI9BC,GAAG,+CAA+C,UAACU,MAAS;YAC1D,IAAMC,mBAAmB,IAAInB,QAAQC;YACrCb,KAAKU,QAAQpB,MAAMmB,OAAOE,QAAQoB;YAElClC,WAAWa;YAEXqB,iBAAiBC,KAAK,YAAM;cAC1BtC,OAAOI,OAAOU,IAAIc,GAAGC,KAAKC,KAAKS,WAAW,WAAW,MAAM;gBAAEC,QAAQ;;cACrEJ;eAEDK,MAAML;;UAGTV,GAAG,qCAAqC,UAACU,MAAS;YAChD,IAAMM,MAAM;cACVC,MAAM;cACNC,SAAS;;YAEX,IAAMP,mBAAmB,IAAInB,QAAQ2B,OAAOH;YAC5CpC,KAAKU,QAAQpB,MAAMmB,OAAOE,QAAQoB;YAElClC,WAAWa;YAEXqB,iBAAiBI,MAAM,YAAM;cAC3BzC,OAAOG,WAAW2C,OAAO,MAAMlB,GAAGK,KAAKC,MAAMQ;cAC7CN;eAEDK,MAAML;;UAGTV,GAAG,wDAAwD,UAACU,MAAS;YACnE,IAAMM,MAAM;cACVK,MAAM;gBAAEJ,MAAM;gBAAKC,SAAS;;;YAE9B,IAAMP,mBAAmB,IAAInB,QAAQ2B,OAAOH;YAC5CpC,KAAKU,QAAQpB,MAAMmB,OAAOE,QAAQoB;YAElClC,WAAWa;YAEXqB,iBAAiBI,MAAM,YAAM;cAC3BzC,OAAOG,WAAWiB,UAAUE,YAAYM,GAAGoB,GAAGC;cAC9Cb;eAEDK,MAAML;;;;;;GAMV","file":"loginComponent.controller.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport loginComponentController from './loginComponent.controller';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('controller: LoginComponentCtrl', () => {\n  let $rootScope;\n  let controller;\n  let $state;\n  let $animate;\n  let Auth;\n\n  beforeEach(angular.mock.module(loginComponentController.name));\n\n  beforeEach(inject(($controller, _$rootScope_) => {\n    $rootScope = _$rootScope_;\n    $state = {\n      go: sinon.stub()\n    };\n    $animate = {};\n    Auth = {\n      login: sinon.stub().returns(Promise.resolve())\n    };\n\n    controller = $controller('LoginComponentCtrl', { $state, $animate, Auth });\n  }));\n\n  describe('login method', () => {\n    beforeEach(() => {\n      controller.loginForm.$valid = true;\n      controller.loginForm.$submitted = false;\n      controller.user = {\n        email: 'anEmail',\n        password: 'aPassword'\n      };\n    });\n\n    it('does nothing if loginForm is not $valid', () => {\n      controller.loginForm.$valid = false;\n      controller.login();\n      expect(Auth.login).not.to.have.been.called;\n    });\n\n    it('does nothing if loginForm has already been $submitted', () => {\n      controller.loginForm.$submitted = true;\n      controller.login();\n      expect(Auth.login).not.to.have.been.called;\n    });\n\n    it('creates the user for a valid form', () => {\n      controller.login();\n      expect(Auth.login.args[0][0]).to.deep.equal({\n        username: controller.user.email,\n        password: controller.user.password\n      });\n    });\n\n    it('goes to the content state after saving user', (done) => {\n      const loginUserPromise = new Promise.resolve();\n      Auth.login = sinon.stub().returns(loginUserPromise);\n\n      controller.login();\n\n      loginUserPromise.then(() => {\n        expect($state.go).to.have.been.calledWith('content', null, { reload: true });\n        done();\n      })\n      .catch(done);\n    });\n\n    it('catches errors when saving a user', (done) => {\n      const err = {\n        code: 401,\n        message: 'Not Authorized'\n      };\n      const loginUserPromise = new Promise.reject(err);\n      Auth.login = sinon.stub().returns(loginUserPromise);\n\n      controller.login();\n\n      loginUserPromise.catch(() => {\n        expect(controller.errors[401]).to.deep.equal(err);\n        done();\n      })\n      .catch(done);\n    });\n\n    it('allows the form to be submitted again after an error', (done) => {\n      const err = {\n        data: { code: 401, message: 'Not Authorized' }\n      };\n      const loginUserPromise = new Promise.reject(err);\n      Auth.login = sinon.stub().returns(loginUserPromise);\n\n      controller.login();\n\n      loginUserPromise.catch(() => {\n        expect(controller.loginForm.$submitted).to.be.false;\n        done();\n      })\n      .catch(done);\n    });\n  });\n\n});\n"]}