{"version":3,"sources":["app/signup/signup.controller.spec.js"],"names":["angular","chai","sinon","sinonChai","signupController","use","expect","describe","$rootScope","controller","$state","$animate","Auth","beforeEach","mock","module","name","inject","$controller","_$rootScope_","go","stub","createUser","returns","Promise","resolve","signupForm","$valid","$submitted","user","firstname","lastname","email","password","it","signup","not","to","have","been","called","args","deep","equal","firstName","lastName","done","createUserPromise","then","calledWith","reload","catch","err","data","code","message","reject","errors","be","false"],"mappings":"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","file":"signup.controller.spec.js","sourcesContent":["import angular from 'angular';\nimport 'angular-mocks';\nimport chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\n\nimport signupController from './signup.controller';\n\nchai.use(sinonChai);\nconst expect = chai.expect;\n\ndescribe('controller: SignupCtrl', () => {\n  let $rootScope;\n  let controller;\n  let $state;\n  let $animate;\n  let Auth;\n\n  beforeEach(angular.mock.module(signupController.name));\n\n  beforeEach(inject(($controller, _$rootScope_) => {\n    $rootScope = _$rootScope_;\n    $state = {\n      go: sinon.stub()\n    };\n    $animate = {};\n    Auth = {\n      createUser: sinon.stub().returns(Promise.resolve())\n    };\n\n    controller = $controller('SignupCtrl', { $state, $animate, Auth });\n  }));\n\n  describe('signup method', () => {\n    beforeEach(() => {\n      controller.signupForm.$valid = true;\n      controller.signupForm.$submitted = false;\n      controller.user = {\n        firstname: 'firstName',\n        lastname: 'lastName',\n        email: 'anEmail',\n        password: 'aPassword'\n      };\n    });\n\n    it('does nothing if signupForm is not $valid', () => {\n      controller.signupForm.$valid = false;\n      controller.signup();\n      expect(Auth.createUser).not.to.have.been.called;\n    });\n\n    it('does nothing if signupForm has already been $submitted', () => {\n      controller.signupForm.$submitted = true;\n      controller.signup();\n      expect(Auth.createUser).not.to.have.been.called;\n    });\n\n    it('creates the user for a valid form', () => {\n      controller.signup();\n      expect(Auth.createUser.args[0][0]).to.deep.equal({\n        firstName:  controller.user.firstname,\n        lastName:   controller.user.lastname,\n        email:      controller.user.email,\n        password:   controller.user.password\n      });\n    });\n\n    it('goes to the content state after saving user', (done) => {\n      const createUserPromise = new Promise.resolve();\n      Auth.createUser = sinon.stub().returns(createUserPromise);\n\n      controller.signup();\n\n      createUserPromise.then(() => {\n        expect($state.go).to.have.been.calledWith('content', null, { reload: true });\n        done();\n      })\n      .catch(done);\n    });\n\n    it('catches errors when saving a user', (done) => {\n      const err = {\n        data: { code: 401, message: 'Not Authorized' }\n      };\n      const createUserPromise = new Promise.reject(err);\n      Auth.createUser = sinon.stub().returns(createUserPromise);\n\n      controller.signup();\n\n      createUserPromise.catch(() => {\n        expect(controller.errors[401]).to.deep.equal(err.data);\n        done();\n      })\n      .catch(done);\n    });\n\n    it('allows the form to be submitted again after an error', (done) => {\n      const err = {\n        data: { code: 401, message: 'Not Authorized' }\n      };\n      const createUserPromise = new Promise.reject(err);\n      Auth.createUser = sinon.stub().returns(createUserPromise);\n\n      controller.signup();\n\n      createUserPromise.catch(() => {\n        expect(controller.signupForm.$submitted).to.be.false;\n        done();\n      })\n      .catch(done);\n    });\n  });\n\n});\n"]}