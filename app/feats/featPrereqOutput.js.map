{"version":3,"sources":["app/feats/featPrereqOutput.js"],"names":["prereqs","output","uniquePrereqs","suppressIteration","processAttrPrereq","val","key","parentKey","parentIndex","parentLength","string","attrStrings","map","attr","x","attrKey","Object","keys","length","join","processPrereqTier","prereq","index","prereqTiers","forEach","subKey","subKeyIndex","push","_","uniqWith","isEqual","processPrereq","i","localPrereqKeys","split","prereqArray","prereqKeys","z"],"mappings":"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","file":"featPrereqOutput.js","sourcesContent":["import 'lodash';\n\nexport default function (prereqs) {\n  let output = '';\n  let uniquePrereqs = []\n  let suppressIteration = false;\n\n\n  function processAttrPrereq (val, key, parentKey, parentIndex, parentLength) {\n    let string = '';\n    if ( key === 'Feat' || key === 'Other') {\n      if ( parentKey === 'any' && parentIndex === parentLength - 1 ) string += ', or  ';\n      string += val;\n      if ( key === 'Feat' ) string += ' feat ';\n      return string;\n    }\n    const attrStrings = val.map( (attr, x) => {\n      let string = '';\n      if ( parentKey === 'any' && parentIndex === parentLength - 1 ) string += 'or ';\n      if ( key === 'Attribute' ) {\n        const attrKey = Object.keys(attr)[0];\n\n        if ( x === val.length - 1 ) {\n          string += ` ${ val.length > 1 ? ' or ' : '' }${ attrKey } ${ attr[attrKey] }`\n        } else {\n          string += `${ attrKey } ${ attr[attrKey] }`;\n        }\n\n      } else if ( key === 'Feat' ) {\n        string += `${ attr } feat `;\n      } else if ( key === 'Other ' ) {\n        string += attr;\n      }\n      return string;\n    });\n    return attrStrings.join(', ');\n  }\n\n  function processPrereqTier (prereq, key, index) {\n\n    let prereqTiers = '';\n\n    if ( key === 'any' ) {\n      Object.keys( prereqs[prereq][key] ).forEach( (subKey, subKeyIndex) => {\n        prereqTiers += processAttrPrereq( prereqs[prereq][key][subKey], subKey, key, index, prereqs[prereq][key][subKey].length );\n      });\n    } else {\n      prereqTiers += processAttrPrereq( prereqs[prereq][key], key, index, prereqs[prereq][key].length );\n    }\n\n    return prereqTiers;\n  }\n\n  Object.keys(prereqs).forEach( key => {\n    uniquePrereqs.push(prereqs[key]);\n  });\n  uniquePrereqs = _.uniqWith(uniquePrereqs, _.isEqual);\n\n  if ( Object.keys(prereqs).length > uniquePrereqs.length ) {\n    suppressIteration = true;\n  }\n\n  Object.keys(prereqs).forEach( (prereq, x) => {\n\n    function processPrereq (key, i, localPrereqKeys, suppressIteration) {\n\n      var output = '';\n      if ( i === 0 ) {\n        output += `<strong>Tier ${ prereq.split('tier')[1] }`;\n        const prereqArray = Object.keys(prereqs);\n        // if we're suppressing iteration, get the tier number of the last tier\n        // object key and put ` - X` where x is the final tier\n        if ( prereqArray.length && suppressIteration ) {\n          output += ` - ${ prereqArray[ prereqArray.length - 1 ].split('tier')[1] }`;\n        }\n        output += `</strong>: `;\n      }\n\n      if ( localPrereqKeys.length > 1 && i === 0 ) {\n        output += `<ul>`;\n      }\n\n\n      if ( localPrereqKeys.length > 1 && i === 0 ) {\n        output += `<li>`;\n      }\n\n      output += processPrereqTier(prereq, key, i);\n\n      if ( localPrereqKeys.length > 1 && i > 0 ) {\n        output += `</li>`;\n      }\n\n      if ( localPrereqKeys.length > 1 && i === localPrereqKeys.length -1  ) {\n        output += `</ul>`;\n      }\n\n      return output;\n    }\n\n    const prereqKeys = Object.keys(prereqs[prereq]);\n    const localPrereqKeys = prereqKeys;\n\n    if (suppressIteration && x > 0) {\n      return;\n    }\n\n    output += '<ul>'\n\n    prereqKeys.forEach( (key, z) => {\n      output += `<li>${ processPrereq(key, z, localPrereqKeys, suppressIteration) }</li>`;\n    });\n\n    output += '</ul>';\n  });\n\n  return output;\n}\n"]}