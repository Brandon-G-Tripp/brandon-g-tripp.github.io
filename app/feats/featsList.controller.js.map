{"version":3,"sources":["app/feats/featsList.controller.js"],"names":["angular","feats","featPrereqOutput","FeatsListCtrl","$scope","$sce","$state","$mdMedia","Config","Link","powers","attributes","selectedPowers","selectedAttributes","searchQuery","attackAttrSearchText","powerLevelValue","powerComparator","val","item","Array","isArray","prerequisite","prereqsAsString","join","toLowerCase","matchedSelectWithPrereq","forEach","attr","split","length","push","thisPower","_","includes","regex","RegExp","show","inAttackFilter","name","match","description","effect","indexOf","searchAttrs","copy","intersection","attribute","include","i","cost","parseInt","costs","output","splice"],"mappings":"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","file":"featsList.controller.js","sourcesContent":["'use strict';\n\nimport angular from 'angular';\nimport 'lodash';\nimport feats from './feats.json!'\nimport featPrereqOutput from './featPrereqOutput';\n\nclass FeatsListCtrl {\n\n  // called once when the class is instantiated\n  constructor ($scope, $sce, $state, $mdMedia, Config, Link) {\n    this.$scope = $scope;\n    this.$scope.$mdMedia = $mdMedia;\n    this.Config = Config;\n    this.Link = Link;\n    this.featPrereqOutput = featPrereqOutput;\n\n    this.powers = [];\n    this.powers = feats;\n    this.attributes = [\n            'All',\n            'Alteration',\n            'Creation',\n            'Fortitude',\n            'Energy',\n            'Entropy',\n            'Movement',\n            'Influence',\n            'Prescience',\n            'Protection',\n          ];\n    this.selectedPowers = [];\n    this.selectedAttributes = ['All'];\n    this.searchQuery = '';\n    this.attackAttrSearchText = '';\n    this.powerLevelValue = 1;\n    // this.powerComparator = 'or Greater';\n    this.powerComparator = 'gte';\n  }\n\n  // public class methods\n  updateSearchTextModel (val) {\n    this.attackAttrSearchText = val;\n  }\n\n  attackAttrSearchFilter () {\n    // return all the options if the user hasn't selected a filter\n    return (item) => {\n      return true;\n\n      // @TODO - Make this work!\n      if ( this.attackAttrSearchText === '' ){\n        return true;\n      } else {\n        if ( !Array.isArray(item.prerequisite) ) return false;\n        const prereqsAsString = item.prerequisite.join().toLowerCase();\n        let matchedSelectWithPrereq = []\n        this.selectedAttributes.forEach( attr => {\n          if ( prereqsAsString.split(attr).length > 1 ) {\n            matchedSelectWithPrereq.push(attr)\n          }\n        });\n        return matchedSelectWithPrereq.length > 0;\n      }\n    }\n    // .bind(this);\n  }\n\n  textSearchFilter () {\n    // if `searchQuery` is empty, we want to show all list items\n    return (thisPower) => {\n      // debugger;\n      var item = thisPower;\n      if ( this.searchQuery === '' && _.includes( this.selectedAttributes, 'All' ) ) {\n        return true;\n      }\n      var regex = new RegExp(this.searchQuery, 'gi');\n      var show = false; // initially we assume that we won't show a given result\n      var inAttackFilter = true;\n      // now we look for matches in the following object properties\n      show = item.name.match(regex) || item.description.match(regex) || item.effect.match(regex);\n      // if the selectedAttributes array is longer than 0, we need to show\n      // only results that match one of the selected properties\n      if ( this.selectedAttributes.length > 0 ) {\n        var inAttackFilter = false;\n        if ( this.selectedAttributes.indexOf('All') !== -1 ) {\n          inAttackFilter = true;\n        } else {\n          var searchAttrs = angular.copy( this.selectedAttributes );\n          var inAttackFilter = _.intersection( item.attribute, searchAttrs ).length > 0;\n        }\n      }\n      // return the result (either `true` or `false`)\n      return show && inAttackFilter;\n    }\n  }\n\n  powerLevelFilter () {\n    return (thisPower) => {\n      var item = thisPower;\n      // const powerAbove = ( this.powerComparator === 'or Greater' );\n      // const powerAbove = ( this.powerComparator === 'or Greater' );\n      // if ( this.powerComparator === 'greater' ) {\n\n      // }\n      var include = false;\n      for (var i = 0; i <= item.cost.length; i++) {\n        switch (this.powerComparator) {\n          case 'gte':\n            if ( item.cost[i] >= parseInt( this.powerLevelValue ) ) {\n              include = true;\n            }\n            break;\n          case 'eq':\n            if ( item.cost[i] === parseInt( this.powerLevelValue ) ) {\n              include = true;\n            }\n            break;\n          case 'lte':\n            if ( item.cost[i] <= parseInt( this.powerLevelValue ) ) {\n              include = true;\n            }\n            break;\n        }\n\n        // if ( powerAbove && item.cost[i] > this.powerLevelValue ) {\n        //   include = true;\n        //   break;\n        // } else if ( !powerAbove && item.cost[i] <= this.powerLevelValue ) {\n        //   include = true;\n        //   break;\n        // }\n      };\n      return include;\n\n    }\n  }\n\n  getCost (costs) {\n    let output = '';\n    if (costs.length > 1) {\n      costs.splice(costs.length - 1, 1, ' or ' + costs.length)\n      costs.forEach( (cost, i) => {\n        output += `${ cost }${ (i !== costs.length - 1) ? ', ' : ' points' }`;\n      });\n      return output;\n    } else {\n      return `${ costs[0] } ${ (costs[0] > 1) ? 'points' : 'point' }`;\n    }\n  }\n}\n\nexport default FeatsListCtrl;\n"]}